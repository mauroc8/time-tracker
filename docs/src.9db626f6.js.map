{"version":3,"sources":["utils/Maybe.ts","utils/Levenshtein.ts","Task.ts","utils/Utils.ts","Input.ts","Button.ts","utils/vdom/Html.ts","utils/Array.ts","utils/layout/Attribute.ts","utils/layout/Layout.ts","style/Component.ts","Record.ts","utils/Effect.ts","Update.ts","utils/Result.ts","CreateRecord.ts","State.ts","style/Color.ts","View.ts","utils/vdom/VirtualDom.ts","index.ts"],"names":[],"mappings":"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","file":"src.9db626f6.js","sourceRoot":"..\\src","sourcesContent":["export interface Maybe<A> {\n    tag: \"just\" | \"nothing\"\n    withDefault: (value: A) => A\n    map: <B>(func: (a: A) => B) => Maybe<B>\n    andThen: <B>(func: (a: A) => Maybe<B>) => Maybe<B>\n    orElse: (_: () => A) => A\n}\n\nexport function just<A>(value: A): Maybe<A> {\n    return new Just<A>(value)\n}\n\nexport function nothing<A>(): Maybe<A> {\n    return new Nothing<A>()\n}\n\nexport function map2<A, B, C>(a: Maybe<A>, b: Maybe<B>, fn: (a: A, b: B) => C): Maybe<C> {\n    return a.andThen(a_ => b.map(b_ => fn(a_, b_)))\n}\n\nexport function map3<A, B, C, D>(\n    maybeA: Maybe<A>,\n    maybeB: Maybe<B>,\n    maybeC: Maybe<C>,\n    fn: (a: A, b: B, c: C) => D\n): Maybe<D> {\n    return maybeA.andThen(a =>\n        maybeB.andThen(b =>\n            maybeC.map(c => fn(a, b, c))))\n}\n\nexport function fromUndefined<A>(a: A | undefined): Maybe<A> {\n    if (a === undefined)\n        return nothing()\n    else\n        return just(a)\n}\n\nclass Just<A> implements Maybe<A> {\n    public tag: \"just\" = \"just\"\n    value: A\n\n    constructor(value: A) {\n        this.value = value\n    }\n\n    withDefault(_: A): A {\n        return this.value\n    }\n\n    map<B>(func: (a: A) => B): Maybe<B> {\n        return new Just(func(this.value))\n    }\n\n    andThen<B>(func: (a: A) => Maybe<B>): Maybe<B> {\n        return func(this.value)\n    }\n\n    orElse(_: () => A): A {\n        return this.value\n    }\n\n    toBool(): boolean {\n        return true\n    }\n}\n\nclass Nothing<A> implements Maybe<A> {\n    public tag: \"nothing\" = \"nothing\"\n\n    constructor() { }\n\n    withDefault(value: A): A {\n        return value\n    }\n\n    map<B>(_: (a: A) => B): Maybe<B> {\n        return new Nothing()\n    }\n\n    andThen<B>(_: (a: A) => Maybe<B>): Maybe<B> {\n        return new Nothing()\n    }\n\n    orElse(value: () => A): A {\n        return value()\n    }\n\n    toBool(): boolean {\n        return false\n    }\n}\n\nexport function decodeJson<A>(json: any, castJust: (json: any) => Maybe<A>): Maybe<Maybe<A>> {\n    if (typeof json === \"object\") {\n        if (json.tag === \"nothing\")\n            return just(nothing())\n        if (json.tag === \"just\")\n            return just(castJust(json.value))\n    }\n    return nothing()\n}\n\nexport function combine<A>(maybes: Array<Maybe<A>>): Maybe<Array<A>> {\n    return maybes.reduce(\n        (maybeArray, maybeItem) =>\n            map2(\n                maybeArray,\n                maybeItem,\n                (array, item) => {\n                    array.push(item)\n                    return array\n                }\n            ),\n        just<Array<A>>([])\n    )\n}\n","\n// --- Memoize the intermediate results (a la dynamic programming) ---\n\ntype Table = {\n    array: Array<number | undefined>,\n    length: number,\n}\n\nfunction table(a: number, b: number): Table {\n    return { array: new Array(a * b), length: a }\n}\n\nfunction get(table: Table, a: number, b: number): number | undefined {\n    return table.array[a * table.length + b]\n}\n\nfunction set(table: Table, a: number, b: number, value: number): void {\n    table.array[a * table.length + b] = value\n}\n\n// --- Levenshtein distance ---\n\n\nfunction tail(a: string): string {\n    return a.substring(1)\n}\n\nexport function distance(a: string, b: string): number {\n    return lev(table(a.length, b.length), a, b)\n}\n\n/** This is the function that matches with the definition at:\n * https://en.wikipedia.org/wiki/Levenshtein_distance#Definition\n */\nfunction lev(table: Table, a: string, b: string,): number {\n    const [a_, b_] = [a.length, b.length]\n\n    if (b_ === 0)\n        return a_\n\n    if (a_ === 0)\n        return b_\n\n    if (a[0] === b[0])\n        return lev_(table, tail(a), tail(b))\n\n    return 1 + Math.min(\n        lev_(table, tail(a), b),\n        lev_(table, a, tail(b)),\n        lev_(table, tail(a), tail(b))\n    )\n}\n\n/** This is the function that memoizes the results in the table\n * to avoid calculating the same result over and over.\n * Mutates the table.\n */\nfunction lev_(table: Table, a: string, b: string,): number {\n    const distance = get(table, a.length, b.length)\n\n    if (distance !== undefined) {\n        return distance\n    } else {\n        const distance_ = lev(table, a, b)\n\n        set(table, a.length, b.length, distance_)\n\n        return distance_\n    }\n}\n","import * as Utils from './utils/Utils'\nimport * as Color from './style/Color'\nimport * as Maybe from './utils/Maybe'\nimport * as Levenshtein from './utils/Levenshtein'\n\n// TASK ---\n\n\nexport type Task = {\n    id: Id,\n    name: string,\n}\n\nexport type Id = {\n    tag: \"task-id\",\n    id: number,\n}\n\nexport function task(id: Id, name: string): Task {\n    return { id, name }\n}\n\nexport function taskId(id: number): Id {\n    return { tag: \"task-id\", id }\n}\n\nexport function idEq(a: Id, b: Id): boolean {\n    return a.id === b.id\n}\n\nexport function matchesId(id: Id, task: Task): boolean {\n    return idEq(id, task.id)\n}\n\nexport function find(id: Id, tasks: Array<Task>): Maybe.Maybe<Task> {\n    return Maybe.fromUndefined(\n        tasks.find(task => matchesId(id, task))\n    )\n}\n\nexport function search(query: string, tasks: Array<Task>): Array<Task> {\n    if (query === \"\")\n        return []\n    else\n        return tasks.map<[Task, number]>(task =>\n            [task, Levenshtein.distance(query.toLowerCase(), task.name.toLowerCase())]\n        )\n            .sort((a: [Task, number], b: [Task, number]) => {\n                const [taskA, distanceA] = a\n                const [taskB, distanceB] = b\n\n                return distanceA - distanceB\n            })\n            .slice(0, 5)\n            .map(([task, _]) => task)\n}\n\nexport function decode(json: any): Maybe.Maybe<Task> {\n    if (typeof json === \"object\"\n        && typeof json.name === \"string\"\n    )\n        return decodeJsonId(json.id)\n            .map(id => ({\n                id: id,\n                name: json.name,\n            }))\n\n    return Maybe.nothing()\n}\n\nexport function decodeJsonId(json: any): Maybe.Maybe<Id> {\n    if (typeof json === \"object\"\n        && json.tag === \"task-id\"\n        && typeof json.id === \"number\"\n    )\n        return Maybe.just(taskId(json.id))\n    return Maybe.nothing()\n}\n","import * as Maybe from './Maybe'\n\n\nfunction pad(number: number): string {\n    return number < 10 ? `0${number}` : String(number)\n}\n\nexport function dateToString(date: Date): string {\n    return `${pad(date.getHours())}:${pad(date.getMinutes())}`\n}\n\nexport function dateFromString(date: Date, input: string): Maybe.Maybe<Date> {\n    const matches = input.match(/(\\d\\d?)[:\\- ]*(\\d\\d?)?/)\n\n    var hours: Maybe.Maybe<number> = Maybe.nothing()\n    var minutes: Maybe.Maybe<number> = Maybe.nothing()\n\n    if (matches !== null) {\n        if (matches[1] !== undefined) {\n            var hours_ = Number(matches[1])\n\n            if (!Number.isNaN(hours_) && hours_ < 24) {\n                hours = Maybe.just(hours_)\n                minutes = Maybe.just(0)\n            }\n        }\n\n        if (matches[2] !== undefined) {\n            var minutes_ = Number(matches[2])\n\n            if (!Number.isNaN(minutes_) && minutes_ < 60) {\n                minutes = Maybe.just(minutes_)\n            }\n        }\n    }\n\n    return Maybe.map2(\n        hours,\n        minutes,\n        (hours, minutes) =>\n            new Date(\n                date.getFullYear(),\n                date.getMonth(),\n                date.getDate(),\n                hours,\n                minutes,\n                0,\n                0\n            )\n    )\n}\n\nexport function dateDifference(a: Date, b: Date): number {\n    const a_ = new Date(\n        a.getFullYear(),\n        a.getMonth(),\n        a.getDay(),\n        a.getHours(),\n        a.getMinutes()\n    )\n\n    const b_ = new Date(\n        b.getFullYear(),\n        b.getMonth(),\n        b.getDay(),\n        b.getHours(),\n        b.getMinutes()\n    )\n\n    return a_.getTime() - b_.getTime()\n}\n\nexport function timeDifferenceToString(difference: number): string {\n    const totalSeconds = Math.floor(difference / 1000)\n    const totalMinutes = Math.floor(totalSeconds / 60)\n    const totalHours = Math.floor(totalMinutes / 60)\n\n    const minutes = totalMinutes % 60\n    const hours = totalHours % 24\n\n    return dateToString(\n        new Date(\n            2020, 1, 1,\n            hours, minutes,\n        )\n    )\n}\n\nexport function upperCaseFirst(string: string): string {\n    return string[0].toUpperCase() + string.substring(1)\n}\n\nexport function assertNever(never: never): void {\n\n}\n\nexport function deepEquality(a: any, b: any): boolean {\n    if (a instanceof Array && b instanceof Array) {\n        return a.every((x, i) => deepEquality(x, b[i]))\n    }\n\n    if (typeof a === \"object\" && typeof b === \"object\") {\n        return Object.entries(a).every(([k, v]) => deepEquality(v, b[k]))\n    }\n\n    return a === b\n}\n","import * as Record from './Record'\n\nexport type Input =\n    | { tag: \"createRecord\", name: CreateRecordInputName }\n    | { tag: \"record\", id: Record.Id, name: RecordInputName }\n\nexport type CreateRecordInputName = \"description\" | \"task\" | \"startTime\"\nexport type RecordInputName = \"description\" | \"task\" | \"startTime\" | \"endTime\"\n\nexport function record(record: Record.Record, name: RecordInputName): Input {\n    return { tag: \"record\", id: record.id, name }\n}\n\nexport function createRecord(name: CreateRecordInputName): Input {\n    return { tag: \"createRecord\", name }\n}\n\nexport function equals(a: Input, b: Input): boolean {\n    if (a.tag === \"createRecord\" && b.tag === \"createRecord\") {\n        return a.name === b.name\n    }\n\n    if (a.tag === \"record\" && b.tag === \"record\") {\n        return Record.idEq(a.id, b.id) && a.name === b.name\n    }\n\n    return false\n}\n\nexport function toStringId(input: Input): string {\n    switch (input.tag) {\n        case \"createRecord\":\n            return `createRecord-${input.name}`\n\n        case \"record\":\n            return `record-${input.id.id}-${input.name}`\n    }\n}\n","import * as Record from './Record'\n\nexport type Button =\n    | { tag: \"stop\" }\n    | { tag: \"play\" }\n    | { tag: \"deleteRecord\", recordId: Record.Id }\n    | { tag: \"resumeRecord\", recordId: Record.Id }\n\nexport function stop(): Button {\n    return { tag: \"stop\" }\n}\n\nexport function play(): Button {\n    return { tag: \"play\" }\n}\n\nexport function deleteRecord(recordId: Record.Id): Button {\n    return { tag: \"deleteRecord\", recordId }\n}\n\nexport function resumeRecord(recordId: Record.Id): Button {\n    return { tag: \"resumeRecord\", recordId }\n}","import * as Utils from '../Utils'\n\nexport type Html<Evt> =\n    | { nodeType: \"node\", tagName: string, attributes: Array<Attribute<Evt>>, children: Array<Html<Evt>> }\n    | { nodeType: \"text\", text: string }\n\nexport function node<Evt>(\n    tagName: string,\n    attributes: Array<Attribute<Evt>>,\n    children: Array<Html<Evt>>\n): Html<Evt> {\n    return { nodeType: \"node\", tagName, attributes, children }\n}\n\nexport function text<Evt>(text: string): Html<Evt> {\n    return { nodeType: \"text\", text }\n}\n\nexport function toElement<Evt>(html: Html<Evt>, dispatch: (evt: Evt) => void): Element | Text {\n    switch (html.nodeType) {\n        case \"node\":\n            const element = document.createElement(html.tagName)\n\n            for (let attribute of html.attributes)\n                toDomAttribute(attribute, dispatch, element)\n\n            for (let child of html.children)\n                element.appendChild(toElement(child, dispatch))\n\n            return element\n\n        case \"text\":\n            return document.createTextNode(html.text)\n    }\n}\n\n// Attr\n\nexport type Attribute<Evt> =\n    | { tag: \"attribute\", name: string, value: string }\n    | { tag: \"property\", name: string, value: any }\n    | { tag: \"eventHandler\", eventName: string, handler: (event: any) => Evt }\n    | { tag: \"style\", property: string, value: string }\n\nexport function attribute<Evt>(name: string, value: string): Attribute<Evt> {\n    return { tag: \"attribute\", name, value }\n}\n\nexport function property<Evt>(name: string, value: any): Attribute<Evt> {\n    return { tag: \"property\", name, value }\n}\n\nexport function on<Evt>(eventName: string, handler: (event: any) => Evt): Attribute<Evt> {\n    return { tag: \"eventHandler\", eventName, handler }\n}\n\nexport function style<Evt>(property: string, value: string): Attribute<Evt> {\n    return { tag: \"style\", property, value }\n}\n\nexport function toDomAttribute<Evt>(attribute: Attribute<Evt>, dispatch: (evt: Evt) => void, $element: Element): void {\n    switch (attribute.tag) {\n        case \"attribute\":\n            $element.setAttribute(attribute.name, attribute.value)\n            return\n\n        case \"property\":\n            ($element as any)[attribute.name] = attribute.value\n            return\n\n        case \"eventHandler\":\n            ($element as any)[`on${attribute.eventName}`] = (event: any) =>\n                dispatch(attribute.handler(event))\n\n            return\n\n        case \"style\":\n            ($element as any).style[attribute.property] = attribute.value\n            return\n    }\n}\n","import * as Maybe from './Maybe'\r\n\r\nexport function intersperse<A>(array: Array<A>, element: A): Array<A> {\r\n    return array.reduce(\r\n        (accum, value) => [...accum, element, value],\r\n        ([] as Array<A>)\r\n    ).slice(1)\r\n}\r\n\r\nexport function filterMap<A, B>(array: Array<A>, fn: (a: A) => Maybe.Maybe<B>): Array<B> {\r\n    const newArray: Array<B> = []\r\n    const l = array.length\r\n\r\n    for (let i = 0; i < l; i++) {\r\n        fn(array[i])?.map(x => newArray.push(x))\r\n    }\r\n\r\n    return newArray\r\n}\r\n","import * as Html from '../vdom/Html'\r\n\r\n\r\nexport type Attribute<A> =\r\n    | { attributeType: \"spacing\", value: number }\r\n    | { attributeType: \"htmlAttribute\", value: Html.Attribute<A> }\r\n    | { attributeType: \"emptyAttribute\" }\r\n\r\n\r\nexport function spacing<A>(value: number): Attribute<A> {\r\n    return { attributeType: \"spacing\", value }\r\n}\r\n\r\nexport function padding<A>(value: number): Attribute<A> {\r\n    return style(\"padding\", value + \"px\")\r\n}\r\n\r\nfunction html<A>(value: Html.Attribute<A>): Attribute<A> {\r\n    return { attributeType: \"htmlAttribute\", value }\r\n}\r\n\r\nexport function empty<A>(): Attribute<A> {\r\n    return { attributeType: \"emptyAttribute\" }\r\n}\r\n\r\nexport function style<A>(cssProperty: string, value: string): Attribute<A> {\r\n    return html(Html.style(cssProperty, value))\r\n}\r\n\r\nexport function attribute<A>(attributeName: string, value: string): Attribute<A> {\r\n    return html(Html.attribute(attributeName, value))\r\n}\r\n\r\nexport function on<A>(eventName: string, handler: (event: any) => A): Attribute<A> {\r\n    return html(Html.on(eventName, handler))\r\n}\r\n","import * as Html from \"../vdom/Html\";\r\nimport * as Utils from \"../Utils\";\r\nimport * as Maybe from \"../Maybe\";\r\nimport * as Array from '../Array';\r\nimport * as Attr from './Attribute'\r\n\r\nexport type Layout<A> =\r\n    | {\r\n        layoutType: \"layout\",\r\n        direction: \"column\" | \"row\",\r\n        htmlTag: string,\r\n        attributes: Array<Attr.Attribute<A>>,\r\n        children: Array<Layout<A>>,\r\n    }\r\n    | {\r\n        layoutType: \"html\",\r\n        html: Html.Html<A>\r\n    }\r\n\r\n\r\nfunction getSpacing<A>(attribute: Attr.Attribute<A>): Maybe.Maybe<number> {\r\n    if (attribute.attributeType === \"spacing\")\r\n        return Maybe.just(attribute.value)\r\n    else\r\n        return Maybe.nothing()\r\n}\r\n\r\nfunction toHtmlAttribute<A>(attribute: Attr.Attribute<A>): Maybe.Maybe<Html.Attribute<A>> {\r\n    switch (attribute.attributeType) {\r\n        case \"htmlAttribute\":\r\n            return Maybe.just(attribute.value)\r\n        case \"spacing\":\r\n            return Maybe.nothing()\r\n        case \"emptyAttribute\":\r\n            return Maybe.nothing()\r\n    }\r\n}\r\n\r\nexport function toHtml<A>(layout: Layout<A>): Html.Html<A> {\r\n    switch (layout.layoutType) {\r\n        case \"html\":\r\n            return layout.html\r\n\r\n        case \"layout\":\r\n            const spacing =\r\n                Array.filterMap(layout.attributes, getSpacing)[0] ?? 0\r\n\r\n            return Html.node(\r\n                layout.htmlTag,\r\n                [\r\n                    Html.style(\"display\", \"flex\"),\r\n                    Html.style(\"flex-direction\", layout.direction),\r\n                    ...Array.filterMap(layout.attributes, toHtmlAttribute)\r\n                ],\r\n                (() => {\r\n                    const childrenToHtml =\r\n                        (children: Array<Layout<A>>) =>\r\n                            children.map(child => toHtml(child))\r\n\r\n                    if (spacing !== 0) {\r\n                        return childrenToHtml(\r\n                            Array.intersperse(layout.children, space(spacing))\r\n                        )\r\n                    } else {\r\n                        return childrenToHtml(layout.children)\r\n                    }\r\n                })()\r\n            )\r\n    }\r\n}\r\n\r\nexport function column<A>(\r\n    htmlTag: string,\r\n    attributes: Array<Attr.Attribute<A>>,\r\n    children: Array<Layout<A>>,\r\n): Layout<A> {\r\n    return { layoutType: \"layout\", direction: \"column\", htmlTag, attributes, children }\r\n}\r\n\r\n\r\nexport function row<A>(\r\n    htmlTag: string,\r\n    attributes: Array<Attr.Attribute<A>>,\r\n    children: Array<Layout<A>>,\r\n): Layout<A> {\r\n    return { layoutType: \"layout\", direction: \"row\", htmlTag, attributes, children }\r\n}\r\n\r\nexport function space<A>(size: number): Layout<A> {\r\n    return column(\r\n        \"div\",\r\n        [\r\n            Attr.style(\"width\", size + \"px\"),\r\n            Attr.style(\"height\", size + \"px\"),\r\n        ],\r\n        []\r\n    )\r\n}\r\n\r\nexport function html<A>(html: Html.Html<A>): Layout<A> {\r\n    return { layoutType: \"html\", html }\r\n}\r\n\r\nexport function text<A>(text: string): Layout<A> {\r\n    return html(Html.text(text))\r\n}\r\n","import * as Html from '../utils/vdom/Html'\r\nimport * as Layout from '../utils/layout/Layout'\r\nimport * as Attribute from '../utils/layout/Attribute'\r\nimport * as Color from './Color'\r\n\r\nexport function textInput<A>(\r\n    attributes: Array<Attribute.Attribute<A>>,\r\n    args: {\r\n        id: string,\r\n        label: Layout.Layout<A>,\r\n        value: string,\r\n        attributes: Array<Attribute.Attribute<A>>,\r\n    }\r\n): Layout.Layout<A> {\r\n    return Layout.column(\r\n        \"label\",\r\n        [\r\n            Attribute.attribute(\"for\", args.id),\r\n            Attribute.style(\"width\", \"100%\"),\r\n            Attribute.style(\"height\", \"100%\"),\r\n            Attribute.spacing(14),\r\n            ...attributes,\r\n        ],\r\n        [\r\n            args.label,\r\n            Layout.column(\r\n                \"input\",\r\n                [\r\n                    Attribute.attribute(\"id\", args.id),\r\n                    Attribute.attribute(\"value\", args.value),\r\n                    Attribute.style(\"width\", \"100%\"),\r\n                    Attribute.style(\"height\", \"100%\"),\r\n                    ...args.attributes,\r\n                ],\r\n                []\r\n            )\r\n        ]\r\n    )\r\n}\r\n\r\nexport function button<A>(\r\n    attributes: Array<Attribute.Attribute<A>>,\r\n    args: {\r\n        onClick: (event: any) => A,\r\n        label: Layout.Layout<A>,\r\n    }\r\n): Layout.Layout<A> {\r\n    return Layout.column(\r\n        \"button\",\r\n        [\r\n            Attribute.on(\"click\", args.onClick),\r\n            ...attributes\r\n        ],\r\n        [args.label]\r\n    )\r\n}\r\n","\r\nimport * as Maybe from './utils/Maybe'\r\nimport * as Utils from './utils/Utils'\r\nimport * as Task from './Task'\r\nimport * as Update from './Update'\r\nimport * as View from './View'\r\nimport * as Levenshtein from './utils/Levenshtein'\r\nimport * as Input from './Input'\r\nimport * as Button from './Button'\r\nimport * as Html from './utils/vdom/Html'\r\nimport * as Layout from './utils/layout/Layout'\r\nimport * as Component from './style/Component'\r\nimport * as Attribute from './utils/layout/Attribute'\r\n\r\nexport type Id = {\r\n    tag: \"recordId\",\r\n    id: number,\r\n}\r\n\r\nexport function recordId(now: Date): Id {\r\n    return { tag: \"recordId\", id: now.getMilliseconds() }\r\n}\r\n\r\nexport function idEq(a: Id, b: Id): boolean {\r\n    return a.id === b.id\r\n}\r\n\r\n// RECORD ---\r\n\r\n\r\nexport type Record = {\r\n    id: Id,\r\n    description: string,\r\n    startInput: string,\r\n    startDate: Date,\r\n    endInput: string,\r\n    endDate: Date,\r\n    taskInput: string,\r\n    taskId: Task.Id,\r\n}\r\n\r\nexport function record(\r\n    description: string,\r\n    startDate: Date,\r\n    endDate: Date,\r\n    id: Id,\r\n    task: Task.Task\r\n): Record {\r\n    return {\r\n        description,\r\n        startInput: Utils.dateToString(startDate),\r\n        startDate,\r\n        endInput: Utils.dateToString(endDate),\r\n        endDate,\r\n        taskId: task.id,\r\n        taskInput: task.name,\r\n        id\r\n    }\r\n}\r\n\r\n\r\nexport function matchesId(id: Id, record: Record): boolean {\r\n    return idEq(id, record.id)\r\n}\r\n\r\nexport function withDescription(description: string, record: Record): Record {\r\n    return { ...record, description }\r\n}\r\n\r\nexport function withTask(taskInput: string, taskId: Maybe.Maybe<Task.Id>, record: Record): Record {\r\n    return { ...record, taskInput, taskId: taskId.withDefault(record.taskId) }\r\n}\r\n\r\nexport function updateStart(startInput: string, record: Record): Record {\r\n    return {\r\n        ...record,\r\n        startInput,\r\n        startDate: Utils.dateFromString(record.startDate, startInput).withDefault(record.startDate)\r\n    }\r\n}\r\n\r\nexport function updateEnd(endInput: string, record: Record): Record {\r\n    return {\r\n        ...record,\r\n        endInput,\r\n        endDate: Utils.dateFromString(record.endDate, endInput).withDefault(record.endDate)\r\n    }\r\n}\r\n\r\n/** If a date is mispelled or the task is invalid, reset the input value to the last valid value. */\r\nexport function normalizeInputs(tasks: Array<Task.Task>, record: Record): Record {\r\n    return {\r\n        ...record,\r\n        startInput: Utils.dateToString(record.startDate),\r\n        endInput: Utils.dateToString(record.endDate),\r\n        taskInput: Maybe\r\n            .fromUndefined(\r\n                tasks.find(task => Task.matchesId(record.taskId, task))\r\n            )\r\n            .map(task => task.name)\r\n            .withDefault(\"\")\r\n    }\r\n}\r\n\r\nexport function view(record: Record, tasks: Array<Task.Task>): Layout.Layout<Update.Event> {\r\n    const input = (inputName: Input.RecordInputName) => Input.record(record, inputName)\r\n\r\n    return Layout.row(\r\n        \"div\",\r\n        [\r\n            Attribute.spacing(18),\r\n        ],\r\n        [\r\n            Component.textInput(\r\n                [\r\n                    Attribute.style(\"flex-basis\", \"40%\"),\r\n                ],\r\n                {\r\n                    id: `record-${record.id}-description`,\r\n                    label: Layout.text('DESCRIPCIÓN'),\r\n                    value: record.description,\r\n                    attributes: [\r\n                        Attribute.on(\"input\", (event: any) => Update.onInput(input(\"description\"), event?.target?.value || \"\")),\r\n                    ],\r\n                }\r\n            ),\r\n            Component.textInput(\r\n                [\r\n                    Attribute.style(\"flex-basis\", \"20%\"),\r\n                ],\r\n                {\r\n                    id: `record-${record.id}-task`,\r\n                    label: Layout.text('TAREA'),\r\n                    value: record.taskInput,\r\n                    attributes: [\r\n                        Attribute.on(\"input\", (event: any) => Update.onInput(input(\"task\"), event?.target?.value || \"\")),\r\n                    ],\r\n                }\r\n            ),\r\n            Component.textInput(\r\n                [\r\n                    Attribute.style(\"flex-basis\", \"10%\"),\r\n                ],\r\n                {\r\n                    id: `record-${record.id}-start`,\r\n                    label: Layout.text('INICIO'),\r\n                    value: record.startInput,\r\n                    attributes: [\r\n                        Attribute.on(\"input\", (event: any) => Update.onInput(input(\"startTime\"), event?.target?.value || \"\")),\r\n                    ],\r\n                }\r\n            ),\r\n            Component.textInput(\r\n                [\r\n                    Attribute.style(\"flex-basis\", \"10%\"),\r\n                ],\r\n                {\r\n                    id: `record-${record.id}-end`,\r\n                    label: Layout.text('FIN'),\r\n                    value: record.endInput,\r\n                    attributes: [\r\n                        Attribute.on(\"input\", (event: any) => Update.onInput(input(\"endTime\"), event?.target?.value || \"\")),\r\n                    ],\r\n                }\r\n            ),\r\n            Component.textInput(\r\n                [\r\n                    Attribute.style(\"flex-basis\", \"10%\"),\r\n                ],\r\n                {\r\n                    id: `record-${record.id}-duration`,\r\n                    label: Layout.text('DURACIÓN'),\r\n                    value: Utils\r\n                        .timeDifferenceToString(Utils.dateDifference(record.endDate, record.startDate)),\r\n                    attributes: [],\r\n                }\r\n            ),\r\n            Layout.column(\r\n                \"div\",\r\n                [\r\n                    Attribute.style(\"flex-basis\", \"10%\"),\r\n                ],\r\n                [\r\n                    Layout.column(\r\n                        \"button\",\r\n                        [\r\n                            Attribute.style(\"flex-grow\", \"1\"),\r\n                            Attribute.on(\"click\", (_) => Update.clickedButton(Button.resumeRecord(record.id))),\r\n                        ],\r\n                        [Layout.text(\"Retomar\")]\r\n                    ),\r\n                    Layout.column(\r\n                        \"button\",\r\n                        [\r\n                            Attribute.on(\"click\", (_) => Update.clickedButton(Button.deleteRecord(record.id))),\r\n                        ],\r\n                        [Layout.text(\"Borrar\")]\r\n                    ),\r\n                ]\r\n            ),\r\n        ]\r\n    )\r\n}\r\n\r\nexport function mapWithId(records: Array<Record>, id: Id, fn: (record: Record) => Record): Array<Record> {\r\n    return records.map(record =>\r\n        matchesId(id, record)\r\n            ? fn(record)\r\n            : record\r\n    )\r\n}\r\n\r\nexport function deleteWithId(records: Array<Record>, id: Id): Array<Record> {\r\n    return records.filter(record => !matchesId(id, record))\r\n}\r\n\r\nexport function decodeJsonId(json: any): Maybe.Maybe<Id> {\r\n    if (typeof json === \"object\"\r\n        && json.tag === \"recordId\"\r\n        && typeof json.id === \"number\"\r\n    )\r\n        return Maybe.just(recordId(new Date(json.id)))\r\n    return Maybe.nothing()\r\n}\r\n\r\nexport function decode(json: any): Maybe.Maybe<Record> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.description === \"string\"\r\n        && typeof json.startInput === \"string\"\r\n        && typeof json.startDate === \"string\"\r\n        && typeof json.endInput === \"string\"\r\n        && typeof json.endDate === \"string\"\r\n        && typeof json.taskInput === \"string\"\r\n    )\r\n        return Maybe.map2(\r\n            decodeJsonId(json.id),\r\n            Task.decodeJsonId(json.taskId),\r\n            (id, taskId) => ({\r\n                id, taskId,\r\n                description: json.description,\r\n                startInput: json.startInput,\r\n                endInput: json.endInput,\r\n                startDate: new Date(json.startDate),\r\n                endDate: new Date(json.endDate),\r\n                taskInput: json.taskInput\r\n            })\r\n        )\r\n    return Maybe.nothing()\r\n}\r\n\r\nexport function search(query: string, records: Array<Record>): Array<Record> {\r\n    if (query === \"\")\r\n        return []\r\n    else\r\n        return records.map<[Record, number]>(record =>\r\n            [record, Levenshtein.distance(query.toLowerCase(), record.description.toLowerCase())]\r\n        )\r\n            .sort((a: [Record, number], b: [Record, number]) => {\r\n                const [recordA, distanceA] = a\r\n                const [recordB, distanceB] = b\r\n\r\n                return distanceA - distanceB\r\n            })\r\n            .map(([record, _]) => record)\r\n}\r\n\r\nexport function filterUsingTask(taskId: Task.Id, records: Array<Record>): Array<Record> {\r\n    return records.filter(record => Task.idEq(taskId, record.taskId))\r\n}\r\n","import * as State from '../State'\nimport * as Maybe from './Maybe'\n\nexport type Effect<A> = {\n    tag: \"Effect\",\n    perform: (dispatch: (event: A) => void) => void\n}\n\nexport function saveToLocalStorage<T>(state: State.State): Effect<T> {\n    return {\n        tag: \"Effect\",\n        perform: (_) =>\n            localStorage.setItem(\"state\", JSON.stringify(state))\n    }\n}\n\nexport function getFromLocalStorage(): Effect<Maybe.Maybe<State.State>> {\n    return {\n        tag: \"Effect\",\n        perform: (dispatch) => {\n            const stateString = localStorage.getItem(\"state\")\n\n            if (stateString === null) {\n                dispatch(Maybe.nothing())\n            } else {\n                try {\n                    dispatch(State.cast(JSON.parse(stateString)))\n                } catch (e) {\n                    dispatch(Maybe.nothing())\n                }\n            }\n        }\n    }\n}\n\nexport function preventDefault<T>(preventDefault: () => void): Effect<T> {\n    return {\n        tag: \"Effect\",\n        perform: (_) => preventDefault()\n    }\n}\n\nexport function none<T>(): Effect<T> {\n    return {\n        tag: \"Effect\",\n        perform: (_) => { }\n    }\n}\n\nexport function batch<T>(effects: Array<Effect<T>>): Effect<T> {\n    return {\n        tag: \"Effect\",\n        perform: (dispatch) => {\n            effects.forEach(effect => effect.perform(dispatch))\n        }\n    }\n}\n","import * as State from './State'\nimport * as Maybe from './utils/Maybe'\nimport * as Record from './Record'\nimport * as CreateRecord from './CreateRecord'\nimport * as Task from './Task'\nimport * as Utils from './utils/Utils'\nimport * as Input from './Input'\nimport * as Effect from './utils/Effect'\nimport * as Button from './Button'\n\n\n\n/** Event is what's typically called an \"action\" in Redux\n * \n*/\nexport type Event =\n    | { tag: \"onInput\", input: Input.Input, value: string }\n    | { tag: \"ButtonClick\", button: Button.Button }\n\nexport function onInput(input: Input.Input, value: string): Event {\n    return {\n        tag: \"onInput\",\n        input, value,\n    }\n}\n\nexport function clickedButton(button: Button.Button): Event {\n    return {\n        tag: \"ButtonClick\",\n        button\n    }\n}\n\n/** The type of the dispatch function\n * \n */\nexport type Dispatch = (event: Event) => void\n\n\n\n// UPDATE ---\n\n/** The main update function (\"reducer\"). Decides how to modify state when an event comes in. Also performs side-effects\n * arbitrarily (BUT it's the ONLY function that can perform side effects in our _whole_ application!)\n * \n */\nexport function update(state: State.State, event: Event): [State.State, Effect.Effect<Event>] {\n    const [newState, effect] = update_(state, event);\n\n    return [\n        newState,\n        Effect.batch([\n            Effect.saveToLocalStorage(newState),\n            effect,\n        ])\n    ]\n}\n\nfunction update_(state: State.State, event: Event): [State.State, Effect.Effect<Event>] {\n    switch (event.tag) {\n        case \"onInput\":\n            return [\n                updateInput(event.input, event.value, state),\n                Effect.none()\n            ]\n\n        case \"ButtonClick\":\n            const button = event.button\n\n            switch (button.tag) {\n                case \"play\":\n                    return [\n                        {\n                            ...state,\n                            createRecord: {\n                                ...state.createRecord,\n                                start: Maybe.just(CreateRecord.start(new Date()))\n                            }\n                        },\n                        Effect.none()\n                    ]\n\n                case \"stop\":\n                    return [\n                        CreateRecord.toRecord(state.tasks, new Date(), state.createRecord)\n                            .match(\n                                record =>\n                                    addRecord(\n                                        record,\n                                        {\n                                            ...state,\n                                            createRecord: CreateRecord.empty(\"\"),\n                                        }\n                                    ),\n                                validationError => state\n                            ),\n                        Effect.none()\n                    ]\n\n                case \"deleteRecord\":\n                    return [\n                        {\n                            ...state,\n                            records: Record.deleteWithId(state.records, button.recordId),\n                        },\n                        Effect.none()\n                    ]\n\n                case \"resumeRecord\":\n                    return [\n                        {\n                            ...state,\n                            createRecord:\n                                // Find record\n                                Maybe.fromUndefined(\n                                    state.records.find(record => Record.matchesId(button.recordId, record))\n                                )\n                                    // Copy its description and task to createRecord\n                                    .map(record =>\n                                        CreateRecord.fromRecord(record, state.tasks)\n                                    )\n                                    // Start it immediately if it's not running already\n                                    .map(createRecord => {\n                                        return createRecord.start.map(_ => ({\n                                            ...createRecord,\n                                            start: Maybe.just(CreateRecord.start(new Date()))\n                                        })).orElse(() => createRecord)\n                                    })\n                                    // Don't do nothing if we didn't find the record\n                                    .withDefault(state.createRecord)\n                        },\n                        Effect.none()\n                    ]\n            }\n            break\n    }\n}\n\nfunction addRecord(record: Record.Record, state: State.State): State.State {\n    return {\n        ...state,\n        records: [record, ...state.records]\n    }\n}\n\n\nfunction searchTaskId(inputValue: string, tasks: Array<Task.Task>): Maybe.Maybe<Task.Id> {\n    return inputValue === \"\"\n        ? Maybe.nothing()\n        : Maybe.fromUndefined(Task.search(inputValue, tasks)[0])\n            .map(task => task.id)\n}\n\nfunction updateInput(\n    input: Input.Input,\n    value: string,\n    state: State.State\n): State.State {\n    switch (input.tag) {\n        case \"createRecord\":\n            return {\n                ...state,\n                createRecord: updateCreateRecordInput(input.name, value, state.tasks, state.createRecord)\n            }\n\n        case \"record\":\n            return {\n                ...state,\n                records: Record.mapWithId(\n                    state.records,\n                    input.id,\n                    record => updateRecordInput(input.name, value, state.tasks, record)\n                )\n            }\n    }\n}\n\nfunction updateCreateRecordInput(\n    inputName: Input.CreateRecordInputName,\n    value: string,\n    tasks: Array<Task.Task>,\n    createRecord: CreateRecord.CreateRecord\n): CreateRecord.CreateRecord {\n    switch (inputName) {\n        case \"description\":\n            return { ...createRecord, description: value }\n        case \"task\":\n            return CreateRecord.withTask(\n                value,\n                searchTaskId(value, tasks),\n                createRecord\n            )\n        case \"startTime\":\n            return CreateRecord.updateStartTime(value, createRecord)\n    }\n}\n\nfunction updateRecordInput(\n    input: Input.RecordInputName,\n    value: string,\n    tasks: Array<Task.Task>,\n    record: Record.Record\n): Record.Record {\n    switch (input) {\n        case \"description\":\n            return { ...record, description: value }\n\n        case \"task\":\n            return Record.withTask(\n                value,\n                searchTaskId(value, tasks),\n                record\n            )\n\n        case \"startTime\":\n            return Record.updateStart(value, record)\n\n        case \"endTime\":\n            return Record.updateEnd(value, record)\n    }\n}\n","import * as Maybe from './Maybe'\n\ntype ResultInterface<A, E> = {\n    map: <B>(fn: (a: A) => B) => Result<B, E>,\n    andThen: <B>(fn: (a: A) => Result<B, E>) => Result<B, E>,\n    mapError: <F>(fn: (e: E) => F) => Result<A, F>,\n    withDefault: (default_: A) => A,\n    match: <B>(mapValue: (a: A) => B, mapError: (e: E) => B) => B,\n}\n\nexport type Result<A, E> =\n    | { tag: 'ok'; value: A } & ResultInterface<A, E>\n    | { tag: 'error'; error: E } & ResultInterface<A, E>\n\nexport function ok<A, E>(value: A): Result<A, E> {\n    return {\n        tag: 'ok',\n        value,\n        map: fn => ok(fn(value)),\n        andThen: fn => fn(value),\n        mapError: _ => ok(value),\n        withDefault: _ => value,\n        match: (fn, _) => fn(value),\n    }\n}\n\nexport function error<A, E>(err: E): Result<A, E> {\n    return {\n        tag: 'error',\n        error: err,\n        map: _ => error(err),\n        andThen: _ => error(err),\n        mapError: fn => error(fn(err)),\n        withDefault: default_ => default_,\n        match: (_, fn) => fn(err),\n    }\n}\n\nexport function map2<A, B, C, E>(\n    resultA: Result<A, E>,\n    resultB: Result<B, E>,\n    fn: (a: A, b: B) => C\n): Result<C, E> {\n    return resultA.andThen(a =>\n        resultB.map(b => fn(a, b))\n    )\n}\n\nexport function andMap<A, B, E>(\n    wrappedFunction: Result<(a: A) => B, E>,\n    wrappedValue: Result<A, E>,\n): Result<B, E> {\n    if (wrappedFunction.tag === 'ok') {\n        return wrappedValue.tag === 'ok'\n            ? ok(wrappedFunction.value(wrappedValue.value))\n            : error(wrappedValue.error)\n    }\n    return error(wrappedFunction.error)\n}\n\nexport function toMaybe<A, E>(result: Result<A, E>): Maybe.Maybe<A> {\n    return result.tag === 'ok' ? Maybe.just(result.value) : Maybe.nothing()\n}\n\nexport function fromMaybe<A, E>(err: E, maybe: Maybe.Maybe<A>): Result<A, E> {\n    return maybe\n        .map(a => ok<A, E>(a))\n        .withDefault(error(err))\n}\n","\r\nimport * as Update from \"./Update\"\r\nimport * as Maybe from './utils/Maybe'\r\nimport * as Task from \"./Task\"\r\nimport * as Utils from './utils/Utils'\r\nimport * as Layout from './utils/layout/Layout'\r\nimport * as Result from './utils/Result'\r\nimport * as Record from './Record'\r\nimport * as Input from './Input'\r\nimport * as Button from './Button'\r\nimport * as Component from './style/Component'\r\nimport * as Attribute from './utils/layout/Attribute'\r\n\r\nimport * as Html from './utils/vdom/Html'\r\n\r\nexport type CreateRecord = {\r\n    description: string,\r\n    start: Maybe.Maybe<{ input: string, date: Date }>,\r\n    taskId: Maybe.Maybe<Task.Id>,\r\n    taskInput: string,\r\n}\r\n\r\nexport function empty(description: string): CreateRecord {\r\n    return {\r\n        description,\r\n        start: Maybe.nothing(),\r\n        taskId: Maybe.nothing(),\r\n        taskInput: \"\"\r\n    }\r\n}\r\n\r\nexport function start(date: Date): { input: string, date: Date } {\r\n    return {\r\n        input: Utils.dateToString(date),\r\n        date\r\n    }\r\n}\r\n\r\n\r\nexport function withTask(taskInput: string, taskId: Maybe.Maybe<Task.Id>, createRecord: CreateRecord): CreateRecord {\r\n    return { ...createRecord, taskId, taskInput }\r\n}\r\n\r\nexport function updateStartTime(startInput: string, createRecord: CreateRecord): CreateRecord {\r\n    return {\r\n        ...createRecord,\r\n        start: createRecord.start.map(start => ({\r\n            input: startInput,\r\n            date: Utils.dateFromString(start.date, startInput).withDefault(start.date)\r\n        }))\r\n    }\r\n}\r\n\r\nexport function normalizeInputs(tasks: Array<Task.Task>, createRecord: CreateRecord): CreateRecord {\r\n    return {\r\n        ...createRecord,\r\n        start: createRecord.start.map(start => ({\r\n            input: Utils.dateToString(start.date),\r\n            date: start.date\r\n        })),\r\n        taskInput: createRecord.taskId.andThen(taskId =>\r\n            Maybe.fromUndefined(tasks.find(task => Task.matchesId(taskId, task)))\r\n        )\r\n            .map(task => task.name)\r\n            .withDefault(\"\")\r\n    }\r\n}\r\n\r\n\r\nexport class Error {\r\n    readonly emptyDescription: boolean\r\n    readonly emptyTask: boolean\r\n\r\n    private constructor(\r\n        emptyDescription: boolean,\r\n        emptyTask: boolean,\r\n    ) {\r\n        this.emptyDescription = emptyDescription\r\n        this.emptyTask = emptyTask\r\n    }\r\n\r\n    static none(): Error {\r\n        return new Error(false, false)\r\n    }\r\n\r\n    withEmptyDescription(): Error {\r\n        return new Error(\r\n            true,\r\n            this.emptyTask,\r\n        )\r\n    }\r\n\r\n    withEmptyTask(): Error {\r\n        return new Error(\r\n            this.emptyDescription,\r\n            true,\r\n        )\r\n    }\r\n\r\n    static equals(a: Error, b: Error): boolean {\r\n        return a.emptyDescription === b.emptyDescription\r\n            && a.emptyTask === b.emptyTask\r\n    }\r\n}\r\n\r\nfunction getError(createRecord: CreateRecord): Error {\r\n    function getErrorOfTask(createRecord: CreateRecord) {\r\n        return createRecord.taskId\r\n            .map(_ => Error.none())\r\n            .orElse(() => Error.none().withEmptyTask())\r\n    }\r\n\r\n    if (createRecord.description.trim() === \"\") {\r\n        return getErrorOfTask(createRecord).withEmptyDescription()\r\n    } else {\r\n        return getErrorOfTask(createRecord)\r\n    }\r\n}\r\n\r\n\r\nexport function toRecord(\r\n    tasks: Array<Task.Task>,\r\n    endDate: Date,\r\n    createRecord: CreateRecord,\r\n): Result.Result<Record.Record, Error> {\r\n    if (!Error.equals(getError(createRecord), Error.none()))\r\n        return Result.error<Record.Record, Error>(getError(createRecord))\r\n\r\n    return Result.fromMaybe<Record.Record, Error>(\r\n        getError(createRecord),\r\n        Maybe\r\n            .map2(\r\n                createRecord.start,\r\n                createRecord.taskId,\r\n                (start, taskId) =>\r\n                    Maybe\r\n                        .fromUndefined(tasks.find(task => Task.matchesId(taskId, task)))\r\n                        .map(task =>\r\n                            Record.record(\r\n                                createRecord.description,\r\n                                start.date,\r\n                                endDate,\r\n                                Record.recordId(endDate),\r\n                                task\r\n                            )\r\n                        )\r\n            )\r\n            .andThen(m => m)\r\n    )\r\n}\r\n\r\nexport function view(\r\n    attributes: Array<Attribute.Attribute<Update.Event>>,\r\n    args: {\r\n        createRecord: CreateRecord,\r\n        records: Array<Record.Record>,\r\n        tasks: Array<Task.Task>,\r\n    }): Layout.Layout<Update.Event> {\r\n    const task = args.createRecord.taskId.andThen(taskId => Task.find(taskId, args.tasks))\r\n\r\n    const redBorder: Attribute.Attribute<Update.Event> =\r\n        Attribute.style(\"borderColor\", \"red\")\r\n\r\n    const descriptionInput = Input.createRecord(\"description\")\r\n    const taskInput = Input.createRecord(\"task\")\r\n\r\n    return Layout.row<Update.Event>(\r\n        \"div\",\r\n        attributes,\r\n        [\r\n            Component.textInput(\r\n                [],\r\n                {\r\n                    id: \"createRecord-description\",\r\n                    label: Layout.text(\"Descripción\"),\r\n                    value: args.createRecord.description,\r\n                    attributes: [\r\n                        (() => {\r\n                            if (getError(args.createRecord).emptyDescription) {\r\n                                return redBorder\r\n                            } else {\r\n                                return Attribute.empty()\r\n                            }\r\n                        })(),\r\n                        Attribute.on(\"change\", (event: any) =>\r\n                            Update.onInput(descriptionInput, event?.target?.value || \"\")\r\n                        ),\r\n                    ] as Array<Attribute.Attribute<Update.Event>>,\r\n                }\r\n            ),\r\n            Component.textInput(\r\n                [],\r\n                {\r\n                    id: \"createRecord-task\",\r\n                    label: Layout.text(\"Tarea\"),\r\n                    value: args.createRecord.taskInput,\r\n                    attributes: (() => {\r\n                        if (getError(args.createRecord).emptyTask) {\r\n                            return [redBorder]\r\n                        } else {\r\n                            return [Attribute.empty()]\r\n                        }\r\n                    })() as Array<Attribute.Attribute<Update.Event>>,\r\n                }\r\n            ),\r\n            ...args.createRecord.start.map<Array<Layout.Layout<Update.Event>>>(start => [\r\n                Component.textInput(\r\n                    [],\r\n                    {\r\n                        id: \"create-record-start-time\",\r\n                        label: Layout.text(\"Start time\"),\r\n                        value: start.input,\r\n                        attributes: [\r\n                            Attribute.on(\r\n                                \"input\",\r\n                                (event: any) =>\r\n                                    Update.onInput(Input.createRecord(\"startTime\"), event?.target?.value || \"\")\r\n                            )\r\n                        ],\r\n                    }\r\n                ),\r\n                Layout.html(Html.node(\r\n                    \"button\",\r\n                    [\r\n                        Html.on(\"click\", (event: any) => Update.clickedButton(Button.stop()))\r\n                    ],\r\n                    [\r\n                        Html.text(\"Parar\"),\r\n                    ]\r\n                ))\r\n            ])\r\n                .withDefault([\r\n                    Layout.html(Html.node(\r\n                        \"button\",\r\n                        [\r\n                            Html.on(\"click\", (_) => Update.clickedButton(Button.play()))\r\n                        ],\r\n                        [\r\n                            Html.text(\"Empezar\")\r\n                        ]\r\n                    ))\r\n                ])\r\n        ]\r\n    )\r\n}\r\n\r\n\r\nfunction decodeStartDate(json: any): Maybe.Maybe<{ input: string, date: Date }> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.input === \"string\"\r\n        && typeof json.date === \"string\"\r\n    )\r\n        return Maybe.just<{ input: string, date: Date }>({\r\n            input: json.input,\r\n            date: new Date(json.date)\r\n        })\r\n    else\r\n        return Maybe.nothing()\r\n}\r\n\r\nexport function decodeJson(json: any): Maybe.Maybe<CreateRecord> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.description === \"string\"\r\n        && typeof json.taskInput === \"string\"\r\n    )\r\n        return Maybe.map2(\r\n            Maybe.decodeJson(json.start, decodeStartDate),\r\n            Maybe.decodeJson(json.taskId, Task.decodeJsonId),\r\n            (start, taskId) => ({\r\n                description: json.description,\r\n                start: start,\r\n                taskId: taskId,\r\n                taskInput: json.taskInput\r\n            })\r\n        )\r\n    else\r\n        return Maybe.nothing()\r\n}\r\n\r\nexport function fromRecord(record: Record.Record, tasks: Array<Task.Task>): CreateRecord {\r\n    return {\r\n        description: record.description,\r\n        start: Maybe.nothing(),\r\n        taskId: Maybe.just(record.taskId),\r\n        taskInput: Maybe.fromUndefined(\r\n            tasks.find(task => Task.matchesId(record.taskId, task))\r\n        )\r\n            .map(task => task.name)\r\n            .withDefault(\"\")\r\n    }\r\n}\r\n","import * as Maybe from './utils/Maybe'\nimport * as Utils from './utils/Utils'\nimport * as Task from './Task'\nimport * as CreateRecord from './CreateRecord'\nimport * as Record from './Record'\nimport * as Effect from './utils/Effect'\n\n// STATE ---\n\n/** The whole state of the application.\n * \n*/\nexport type State = {\n    createRecord: CreateRecord.CreateRecord,\n    records: Array<Record.Record>,\n    tasks: Array<Task.Task>,\n}\n\nconst backendTask = Task.task(\n    Task.taskId(0),\n    \"Backend\",\n)\n\nexport function initialState<Event>(flags: any): [State, Effect.Effect<Event>] {\n    try {\n        return [\n            cast(JSON.parse(flags)).withDefault(initialState_),\n            Effect.none(),\n        ]\n    } catch (e) {\n        return [initialState_, Effect.none()]\n    }\n}\n\nconst initialState_: State = {\n    createRecord: CreateRecord.empty(\"\"),\n    records: [\n        Record.record(\n            \"Login\",\n            new Date(),\n            new Date(),\n            Record.recordId(new Date()),\n            backendTask,\n        ),\n        Record.record(\n            \"Login\",\n            new Date(),\n            new Date(),\n            Record.recordId(new Date()),\n            backendTask,\n        ),\n        Record.record(\n            \"Login\",\n            new Date(),\n            new Date(),\n            Record.recordId(new Date()),\n            backendTask,\n        ),\n    ],\n    tasks: [\n        backendTask,\n        Task.task(\n            Task.taskId(1),\n            \"Frontend\",\n        )\n    ],\n}\n\nexport function cast(json: any): Maybe.Maybe<State> {\n    if (typeof json === \"object\"\n        && json.records instanceof Array\n        && json.tasks instanceof Array\n\n    ) {\n        return Maybe.map3(\n            CreateRecord.decodeJson(json.createRecord),\n            Maybe.combine((json.records as Array<any>).map((record: any) => Record.decode(record))),\n            Maybe.combine((json.tasks as Array<any>).map((task: any) => Task.decode(task))),\n            (createRecord, records, tasks) => ({\n                createRecord,\n                records,\n                tasks,\n            })\n        )\n    } else {\n        return Maybe.nothing()\n    }\n}\n","import * as Maybe from '../utils/Maybe'\r\n\r\ntype Color =\r\n    | Rgba\r\n    | Hex\r\n\r\n/** RGBA, each channel in [0, 1] */\r\ntype Rgba = {\r\n    tag: \"Rgba\",\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a: number\r\n}\r\n\r\nexport function rgba(r: number, g: number, b: number, a: number): Color {\r\n    return { tag: \"Rgba\", r, g, b, a }\r\n}\r\n\r\nexport function rgba255(r: number, g: number, b: number, a: number): Color {\r\n    return { tag: \"Rgba\", r: r / 255, g: g / 255, b: b / 255, a }\r\n}\r\n\r\nexport function withAlpha(rgba: Rgba, a: number): Color {\r\n    return { ...rgba, a }\r\n}\r\n\r\ntype Hex = {\r\n    tag: \"Hex\", hex: string\r\n}\r\n\r\nexport function hex(hex: string): Color {\r\n    return { tag: \"Hex\", hex }\r\n}\r\n\r\ntype Hsl = {\r\n    tag: \"Hsl\",\r\n    h: number,\r\n    s: number,\r\n    l: number,\r\n}\r\n\r\nexport function toCssString(color: Color): string {\r\n    switch (color.tag) {\r\n        case \"Rgba\":\r\n            return `rgba(${Math.floor(color.r * 255)}, ${Math.floor(color.g * 255)}, ${Math.floor(color.b * 255)}, ${color.a})`\r\n        case \"Hex\":\r\n            return `#${color.hex}`\r\n    }\r\n}\r\n\r\n\r\nexport function decode(json: any): Maybe.Maybe<Color> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.r === \"number\"\r\n        && typeof json.g === \"number\"\r\n        && typeof json.b === \"number\"\r\n        && typeof json.a === \"number\"\r\n    )\r\n        return Maybe.just(rgba(json.r, json.g, json.b, json.a))\r\n\r\n    if (typeof json === \"object\"\r\n        && typeof json.hex === \"string\"\r\n    )\r\n        return Maybe.just(hex(json.hex))\r\n\r\n    return Maybe.nothing()\r\n}\r\n\r\n\r\n/** Application colors\r\n * \r\n */\r\n\r\nexport const black = hex('000000')\r\nexport const gray50 = hex('0C0C0C')\r\nexport const gray100 = hex('141414')\r\nexport const gray200 = hex('222222')\r\nexport const gray500 = hex('929292')\r\nexport const gray600 = hex('A1A1A1')\r\nexport const gray700 = hex('B1B1B1')\r\nexport const white = hex('FFFFFF')\r\n\r\nexport const violet = hex('7F8BF8')\r\n\r\nexport const background = gray100\r\nexport const accent = violet\r\n","\nimport * as State from './State'\nimport * as Update from './Update'\nimport * as CreateRecord from './CreateRecord'\nimport * as Record from './Record'\nimport * as Color from './style/Color'\nimport * as Task from './Task'\nimport * as Html from './utils/vdom/Html'\nimport * as Layout from './utils/layout/Layout'\nimport * as Attribute from './utils/layout/Attribute'\n\nexport function view(state: State.State): Html.Html<Update.Event> {\n    return Layout.toHtml(\n        Layout.column(\n            \"div\",\n            [\n                Attribute.style(\"align-items\", \"center\"),\n            ],\n            [\n                // CSS\n                Layout.html(bodyStyles()),\n                // CONTENT\n                Layout.column(\n                    \"div\",\n                    [\n                        Attribute.style(\"max-width\", \"1024px\"),\n                    ],\n                    [\n                        Layout.space(50),\n                        /*CreateRecord.view(\n                            [\n                                Attribute.padding(10),\n                            ],\n                            {\n                                createRecord: state.createRecord,\n                                records: state.records,\n                                tasks: state.tasks,\n                            }\n                        ),*/\n                        viewRecords(state.records, state.tasks),\n                    ]\n                ),\n            ]\n        )\n    )\n}\n\nfunction viewRecords(\n    records: Array<Record.Record>,\n    tasks: Array<Task.Task>,\n): Layout.Layout<Update.Event> {\n    return Layout.column(\n        \"div\",\n        [\n            Attribute.spacing(50),\n        ],\n        records.map(record => Record.view(record, tasks))\n    )\n}\n\nfunction bodyStyles(): Html.Html<any> {\n    return Html.node(\"style\", [], [\n        Html.text(`\n\n/* Reset */\n* {\n    margin: 0;\n    padding: 0;\n    text: inherit;\n    box-sizing: inherit;\n    text-decoration: inherit;\n    font-weight: inherit;\n    font-size: inherit;\n    background: transparent;\n    border: 0;\n    transition: all 0.2s ease-out;\n    color: inherit;\n}\n*:hover, *:focus, *:active {\n    outline: 0;\n}\n\nhtml {\n    box-sizing: border-box;\n    line-height: 1;\n}\n\n/* Styles */\n\nbody {\n    background-color: ${Color.toCssString(Color.background)};\n    font-family: Lato, -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif;\n    border-top: 6px solid ${Color.toCssString(Color.accent)};\n    color: ${Color.toCssString(Color.gray700)};\n}\n\nlabel {\n    color: ${Color.toCssString(Color.gray500)};\n    font-size: 12px;\n    letter-spacing: 0.08em;\n    font-weight: 500;\n}\ninput {\n    background-color: ${Color.toCssString(Color.gray50)};\n    color: ${Color.toCssString(Color.white)};\n    font-size: 14px;\n    letter-spacing: 0.04em;\n    font-weight: 300;\n    line-height: 38px;\n    padding-left: 9px;\n    padding-right: 9px;\n}\ninput:focus {\n    background-color: ${Color.toCssString(Color.black)};\n}\n\n        `)\n    ])\n}\n","import * as Html from './Html'\nimport * as Utils from '../Utils'\n\nexport function diff<T>(\n    oldVDom: Html.Html<T>,\n    newVDom: Html.Html<T>,\n    dispatch: (event: T) => void,\n): ($node: Element | Text) => Element | Text {\n\n    if (oldVDom.nodeType === \"text\"\n        || newVDom.nodeType === \"text\"\n        || oldVDom.tagName !== newVDom.tagName\n    ) {\n        return $node => {\n            const $newNode = Html.toElement(newVDom, dispatch)\n            $node.replaceWith($newNode)\n            return $newNode\n        }\n    } else {\n        const patchAttributes = diffAttributes(oldVDom.attributes, newVDom.attributes, dispatch)\n        const patchChildren = diffChildren(oldVDom.children, newVDom.children, dispatch)\n\n        return $node => {\n            patchAttributes($node)\n            patchChildren($node)\n\n            return $node\n        }\n    }\n}\n\n/** Like List.map2 but without ignoring elements if one list is larger than the other */\nfunction map2Extra<A, B>(\n    xs: Array<A>,\n    ys: Array<A>,\n    bothPresent: (x: A, y: A, index: number) => B,\n    xPresent: (x: A, index: number) => B,\n    yPresent: (y: A, index: number) => B\n): Array<B> {\n    const array: Array<B> = []\n\n    for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n        array.push(bothPresent(xs[i], ys[i], i))\n    }\n\n    for (let i = ys.length; i < xs.length; i++) {\n        array.push(xPresent(xs[i], i))\n    }\n\n    for (let i = xs.length; i < ys.length; i++) {\n        array.push(yPresent(ys[i], i))\n    }\n\n    return array\n}\n\n// diffAttributes\n\nfunction diffAttributes<T>(\n    oldAttributes: Array<Html.Attribute<T>>,\n    newAttributes: Array<Html.Attribute<T>>,\n    dispatch: (event: T) => void,\n): ($node: Element | Text) => void {\n\n    const patches = map2Extra(\n        oldAttributes,\n        newAttributes,\n        (oldAttr, newAttr, i) => ($node: Element) => {\n            if (!attributeEquality(oldAttr, newAttr)) {\n                removeAttribute(oldAttr, $node)\n                Html.toDomAttribute(newAttr, dispatch, $node)\n            }\n        },\n        (oldAttr, i) => $node => {\n            removeAttribute(oldAttr, $node)\n        },\n        (newAttr, i) => $node => {\n            Html.toDomAttribute(newAttr, dispatch, $node)\n        }\n    )\n\n    return $node => {\n        if ($node instanceof Element)\n            patches.forEach(patch => patch($node))\n    }\n}\n\nfunction attributeEquality<T>(a: Html.Attribute<T>, b: Html.Attribute<T>): boolean {\n    if (a.tag === \"attribute\" && b.tag === \"attribute\") {\n        return a.name === b.name && a.value === b.value\n    } else if (a.tag === \"property\" && b.tag === \"property\") {\n        return a.name === b.name && Utils.deepEquality(a.value, b.value)\n    } else if (a.tag === \"eventHandler\" && b.tag === \"eventHandler\") {\n        // The function comparison will most likely always return false;\n        // a smarter implementation could optimize this case somehow.\n        return a.eventName === b.eventName && a.handler === b.handler\n    } else if (a.tag === \"style\" && b.tag === \"style\") {\n        return a.property === b.property && a.value === b.value\n    }\n\n    return false\n}\n\nfunction removeAttribute<T>(attr: Html.Attribute<T>, $node: Element): void {\n    if ($node instanceof Text) {\n        // Text nodes don't have attributes AFAIK\n        return\n    }\n\n    switch (attr.tag) {\n        case \"attribute\":\n            $node.removeAttribute(attr.name)\n            return\n        case \"property\":\n            ($node as any)[attr.name] = undefined\n            return\n        case \"eventHandler\":\n            ($node as any)[`on${attr.eventName}`] = undefined\n            return\n        case \"style\":\n            ($node as any).style[attr.property] = \"\"\n            return\n    }\n\n    Utils.assertNever(attr)\n}\n\n\n// diffChildren\n\nfunction diffChildren<T>(\n    oldChildren: Array<Html.Html<T>>,\n    newChildren: Array<Html.Html<T>>,\n    dispatch: (event: T) => void,\n): ($parent: Element | Text) => void {\n    return $parent => {\n        if ($parent instanceof Element) {\n            /** We need the $parent to calculate the patches because we need to save childNodes[i]\n             * before removing elements, which could alter the indexing.\n             */\n            const patches = getChildrenPatches(oldChildren, newChildren, dispatch, $parent)\n            patches.forEach(patch => patch())\n        }\n    }\n}\n\nfunction getChildrenPatches<T>(\n    oldChildren: Array<Html.Html<T>>,\n    newChildren: Array<Html.Html<T>>,\n    dispatch: (event: T) => void,\n    $parent: Element,\n): Array<() => void> {\n    return map2Extra(\n        oldChildren,\n        newChildren,\n        (oldChild, newChild, i) => {\n            const $child = $parent.childNodes[i]\n\n            return () => {\n                if ($child instanceof Element || $child instanceof Text)\n                    diff(oldChild, newChild, dispatch)($child)\n                else\n                    throw { $parent, oldChild, newChild, $child }\n            }\n        },\n        (oldChild, i) => {\n            const $child = $parent.childNodes[i]\n\n            return () => {\n                $child.remove()\n            }\n        },\n        (newChild, i) => () => {\n            $parent.appendChild(Html.toElement(newChild, dispatch))\n        }\n    )\n}\n\n","/** About this code\r\n * \r\n * I'm using The Elm Architecture, which is essentially the same idea as React/Redux.\r\n * \r\n */\r\n\r\nimport * as State from './State'\r\nimport * as Update from './Update'\r\nimport * as View from './View'\r\nimport * as VirtualDom from './utils/vdom/VirtualDom'\r\nimport * as Html from './utils/vdom/Html'\r\n\r\nlet $rootElement = document.getElementById('root') as Element | Text\r\nlet timeout = setTimeout(() => { }, 0)\r\n\r\n/** Flags refer to some external state that is passed to app initialization */\r\nconst flags = localStorage.getItem(\"state\")\r\n\r\nif ($rootElement !== null) {\r\n    let [state, initialEffect] = State.initialState<Update.Event>(flags)\r\n    let view = View.view(state)\r\n\r\n    const dispatch = (event: Update.Event) => {\r\n        const [newState, effect] = Update.update(state, event)\r\n\r\n        const newView = View.view(newState)\r\n        const patch = VirtualDom.diff(view, newView, dispatch)\r\n\r\n        patch($rootElement)\r\n        view = newView\r\n        effect.perform(dispatch)\r\n    }\r\n\r\n    const $initialRender = Html.toElement(view, dispatch)\r\n    $rootElement.replaceWith($initialRender)\r\n    $rootElement = $initialRender\r\n\r\n    initialEffect.perform(dispatch)\r\n}\r\n"]}