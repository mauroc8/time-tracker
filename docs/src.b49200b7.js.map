{"version":3,"sources":["Maybe.ts","Utils.ts","Levenshtein.ts","Task.ts","Html.ts","View.ts","Input.ts","Button.ts","Record.ts","Effect.ts","AutoCompleteMenu.ts","Update.ts","Result.ts","CreateRecord.ts","State.ts","VirtualDom.ts","index.ts"],"names":[],"mappings":"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","file":"src.b49200b7.js","sourceRoot":"..\\src","sourcesContent":["export interface Maybe<A> {\r\n    tag: \"just\" | \"nothing\"\r\n    withDefault: (value: A) => A\r\n    map: <B>(func: (a: A) => B) => Maybe<B>\r\n    andThen: <B>(func: (a: A) => Maybe<B>) => Maybe<B>\r\n    orElse: (other: Maybe<A>) => Maybe<A>\r\n}\r\n\r\nexport function just<A>(value: A): Maybe<A> {\r\n    return new Just<A>(value)\r\n}\r\n\r\nexport function nothing<A>(): Maybe<A> {\r\n    return new Nothing<A>()\r\n}\r\n\r\nexport function map2<A, B, C>(a: Maybe<A>, b: Maybe<B>, fn: (a: A, b: B) => C): Maybe<C> {\r\n    return a.andThen(a_ => b.map(b_ => fn(a_, b_)))\r\n}\r\n\r\nexport function map3<A, B, C, D>(\r\n    maybeA: Maybe<A>,\r\n    maybeB: Maybe<B>,\r\n    maybeC: Maybe<C>,\r\n    fn: (a: A, b: B, c: C) => D\r\n): Maybe<D> {\r\n    return maybeA.andThen(a =>\r\n        maybeB.andThen(b =>\r\n            maybeC.map(c => fn(a, b, c))))\r\n}\r\n\r\nexport function fromUndefined<A>(a: A | undefined): Maybe<A> {\r\n    if (a === undefined)\r\n        return nothing()\r\n    else\r\n        return just(a)\r\n}\r\n\r\nclass Just<A> implements Maybe<A> {\r\n    public tag: \"just\" = \"just\"\r\n    value: A\r\n\r\n    constructor(value: A) {\r\n        this.value = value\r\n    }\r\n\r\n    withDefault(_: A): A {\r\n        return this.value\r\n    }\r\n\r\n    map<B>(func: (a: A) => B): Maybe<B> {\r\n        return new Just(func(this.value))\r\n    }\r\n\r\n    andThen<B>(func: (a: A) => Maybe<B>): Maybe<B> {\r\n        return func(this.value)\r\n    }\r\n\r\n    orElse(other: Maybe<A>): Maybe<A> {\r\n        return this\r\n    }\r\n\r\n    toBool(): boolean {\r\n        return true\r\n    }\r\n}\r\n\r\nclass Nothing<A> implements Maybe<A> {\r\n    public tag: \"nothing\" = \"nothing\"\r\n\r\n    constructor() { }\r\n\r\n    withDefault(value: A): A {\r\n        return value\r\n    }\r\n\r\n    map<B>(_: (a: A) => B): Maybe<B> {\r\n        return new Nothing()\r\n    }\r\n\r\n    andThen<B>(_: (a: A) => Maybe<B>): Maybe<B> {\r\n        return new Nothing()\r\n    }\r\n\r\n    orElse(other: Maybe<A>): Maybe<A> {\r\n        return other\r\n    }\r\n\r\n    toBool(): boolean {\r\n        return false\r\n    }\r\n}\r\n\r\nexport function cast<A>(json: any, castJust: (json: any) => Maybe<A>): Maybe<Maybe<A>> {\r\n    if (typeof json === \"object\") {\r\n        if (json.tag === \"nothing\")\r\n            return just(nothing())\r\n        if (json.tag === \"just\")\r\n            return just(castJust(json.value))\r\n    }\r\n    return nothing()\r\n}\r\n\r\nexport function combine<A>(maybes: Array<Maybe<A>>): Maybe<Array<A>> {\r\n    return maybes.reduce(\r\n        (maybeArray, maybeItem) =>\r\n            map2(\r\n                maybeArray,\r\n                maybeItem,\r\n                (array, item) => {\r\n                    array.push(item)\r\n                    return array\r\n                }\r\n            ),\r\n        just<Array<A>>([])\r\n    )\r\n}\r\n","import * as Maybe from './Maybe'\r\n\r\n/** RGBA, each channel in [0, 1] */\r\nexport type Rgba = {\r\n    r: number,\r\n    g: number,\r\n    b: number,\r\n    a: number\r\n}\r\n\r\nexport function rgba(r: number, g: number, b: number, a: number): Rgba {\r\n    return { r, g, b, a }\r\n}\r\n\r\nexport function toCssString(color: Rgba): string {\r\n    return `rgba(${Math.floor(color.r * 255)}, ${Math.floor(color.g * 255)}, ${Math.floor(color.b * 255)}, ${color.a})`\r\n}\r\n\r\n/** https://bottosson.github.io/posts/oklab/ */\r\nexport function oklab(lightness: number, greenRed: number, blueYellow: number): Rgba {\r\n    const [L, a, b] = [lightness, greenRed, blueYellow]\r\n\r\n    const l_ = L + 0.3963377774 * a + 0.2158037573 * b;\r\n    const m_ = L - 0.1055613458 * a - 0.0638541728 * b;\r\n    const s_ = L - 0.0894841775 * a - 1.2914855480 * b;\r\n\r\n    const l = l_ * l_ * l_;\r\n    const m = m_ * m_ * m_;\r\n    const s = s_ * s_ * s_;\r\n\r\n    return {\r\n        r: + 4.0767245293 * l - 3.3072168827 * m + 0.2307590544 * s,\r\n        g: - 1.2681437731 * l + 2.6093323231 * m - 0.3411344290 * s,\r\n        b: - 0.0041119885 * l - 0.7034763098 * m + 1.7068625689 * s,\r\n        a: 1.0\r\n    }\r\n}\r\n\r\nexport function withAlpha(rgba: Rgba, a: number): Rgba {\r\n    return { ...rgba, a }\r\n}\r\n\r\nexport function castRgba(json: any): Maybe.Maybe<Rgba> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.r === \"number\"\r\n        && typeof json.g === \"number\"\r\n        && typeof json.b === \"number\"\r\n        && typeof json.a === \"number\"\r\n    )\r\n        return Maybe.just({\r\n            r: json.r,\r\n            g: json.g,\r\n            b: json.b,\r\n            a: json.a\r\n        })\r\n    return Maybe.nothing()\r\n}\r\n\r\n\r\nfunction pad(number: number): string {\r\n    return number < 10 ? `0${number}` : String(number)\r\n}\r\n\r\nexport function dateToString(date: Date): string {\r\n    return `${pad(date.getHours())}:${pad(date.getMinutes())}`\r\n}\r\n\r\nexport function dateFromString(date: Date, input: string): Maybe.Maybe<Date> {\r\n    const matches = input.match(/(\\d\\d?)[:\\- ]*(\\d\\d?)?/)\r\n\r\n    var hours: Maybe.Maybe<number> = Maybe.nothing()\r\n    var minutes: Maybe.Maybe<number> = Maybe.nothing()\r\n\r\n    if (matches !== null) {\r\n        if (matches[1] !== undefined) {\r\n            var hours_ = Number(matches[1])\r\n\r\n            if (!Number.isNaN(hours_) && hours_ < 24) {\r\n                hours = Maybe.just(hours_)\r\n                minutes = Maybe.just(0)\r\n            }\r\n        }\r\n\r\n        if (matches[2] !== undefined) {\r\n            var minutes_ = Number(matches[2])\r\n\r\n            if (!Number.isNaN(minutes_) && minutes_ < 60) {\r\n                minutes = Maybe.just(minutes_)\r\n            }\r\n        }\r\n    }\r\n\r\n    return Maybe.map2(\r\n        hours,\r\n        minutes,\r\n        (hours, minutes) =>\r\n            new Date(\r\n                date.getFullYear(),\r\n                date.getMonth(),\r\n                date.getDate(),\r\n                hours,\r\n                minutes,\r\n                0,\r\n                0\r\n            )\r\n    )\r\n}\r\n\r\nexport function dateDifference(a: Date, b: Date): number {\r\n    const a_ = new Date(\r\n        a.getFullYear(),\r\n        a.getMonth(),\r\n        a.getDay(),\r\n        a.getHours(),\r\n        a.getMinutes()\r\n    )\r\n\r\n    const b_ = new Date(\r\n        b.getFullYear(),\r\n        b.getMonth(),\r\n        b.getDay(),\r\n        b.getHours(),\r\n        b.getMinutes()\r\n    )\r\n\r\n    return a_.getTime() - b_.getTime()\r\n}\r\n\r\nexport function timeDifferenceToString(difference: number): string {\r\n    const totalSeconds = Math.floor(difference / 1000)\r\n    const totalMinutes = Math.floor(totalSeconds / 60)\r\n    const totalHours = Math.floor(totalMinutes / 60)\r\n\r\n    const minutes = totalMinutes % 60\r\n    const hours = totalHours % 24\r\n\r\n    return dateToString(\r\n        new Date(\r\n            2020, 1, 1,\r\n            hours, minutes,\r\n        )\r\n    )\r\n}\r\n\r\nexport function upperCaseFirst(string: string): string {\r\n    return string[0].toUpperCase() + string.substring(1)\r\n}\r\n\r\nexport function assertNever(never: never): void {\r\n\r\n}\r\n\r\nexport function deepEquality(a: any, b: any): boolean {\r\n    if (a instanceof Array && b instanceof Array) {\r\n        return a.every((x, i) => deepEquality(x, b[i]))\r\n    }\r\n\r\n    if (typeof a === \"object\" && typeof b === \"object\") {\r\n        return Object.entries(a).every(([k, v]) => deepEquality(v, b[k]))\r\n    }\r\n\r\n    return a === b\r\n}\r\n","\r\n// --- Memoize the intermediate results (a la dynamic programming) ---\r\n\r\ntype Table = {\r\n    array: Array<number | undefined>,\r\n    length: number,\r\n}\r\n\r\nfunction table(a: number, b: number): Table {\r\n    return { array: new Array(a * b), length: a }\r\n}\r\n\r\nfunction get(table: Table, a: number, b: number): number | undefined {\r\n    return table.array[a * table.length + b]\r\n}\r\n\r\nfunction set(table: Table, a: number, b: number, value: number): void {\r\n    table.array[a * table.length + b] = value\r\n}\r\n\r\n// --- Levenshtein distance ---\r\n\r\n\r\nfunction tail(a: string): string {\r\n    return a.substring(1)\r\n}\r\n\r\nexport function distance(a: string, b: string): number {\r\n    return lev(table(a.length, b.length), a, b)\r\n}\r\n\r\n/** This is the function that matches with the definition at:\r\n * https://en.wikipedia.org/wiki/Levenshtein_distance#Definition\r\n */\r\nfunction lev(table: Table, a: string, b: string,): number {\r\n    const [a_, b_] = [a.length, b.length]\r\n\r\n    if (b_ === 0)\r\n        return a_\r\n\r\n    if (a_ === 0)\r\n        return b_\r\n\r\n    if (a[0] === b[0])\r\n        return lev_(table, tail(a), tail(b))\r\n\r\n    return 1 + Math.min(\r\n        lev_(table, tail(a), b),\r\n        lev_(table, a, tail(b)),\r\n        lev_(table, tail(a), tail(b))\r\n    )\r\n}\r\n\r\n/** This is the function that memoizes the results in the table\r\n * to avoid calculating the same result over and over.\r\n * Mutates the table.\r\n */\r\nfunction lev_(table: Table, a: string, b: string,): number {\r\n    const distance = get(table, a.length, b.length)\r\n\r\n    if (distance !== undefined) {\r\n        return distance\r\n    } else {\r\n        const distance_ = lev(table, a, b)\r\n\r\n        set(table, a.length, b.length, distance_)\r\n\r\n        return distance_\r\n    }\r\n}\r\n","import * as Utils from './Utils'\r\nimport * as Maybe from './Maybe'\r\nimport * as Levenshtein from './Levenshtein'\r\n\r\n// TASK ---\r\n\r\n\r\nexport type Task = {\r\n    id: Id,\r\n    name: string,\r\n    color: Utils.Rgba,\r\n}\r\n\r\nexport type Id = {\r\n    tag: \"task-id\",\r\n    id: number,\r\n}\r\n\r\nexport function task(id: Id, name: string, color: Utils.Rgba): Task {\r\n    return { id, name, color }\r\n}\r\n\r\nexport function taskId(id: number): Id {\r\n    return { tag: \"task-id\", id }\r\n}\r\n\r\nexport function idEq(a: Id, b: Id): boolean {\r\n    return a.id === b.id\r\n}\r\n\r\nexport function matchesId(id: Id, task: Task): boolean {\r\n    return idEq(id, task.id)\r\n}\r\n\r\nexport function find(id: Id, tasks: Array<Task>): Maybe.Maybe<Task> {\r\n    return Maybe.fromUndefined(\r\n        tasks.find(task => matchesId(id, task))\r\n    )\r\n}\r\n\r\nexport function search(query: string, tasks: Array<Task>): Array<Task> {\r\n    if (query === \"\")\r\n        return []\r\n    else\r\n        return tasks.map<[Task, number]>(task =>\r\n            [task, Levenshtein.distance(query.toLowerCase(), task.name.toLowerCase())]\r\n        )\r\n            .sort((a: [Task, number], b: [Task, number]) => {\r\n                const [taskA, distanceA] = a\r\n                const [taskB, distanceB] = b\r\n\r\n                return distanceA - distanceB\r\n            })\r\n            .slice(0, 5)\r\n            .map(([task, _]) => task)\r\n}\r\n\r\nexport function cast(json: any): Maybe.Maybe<Task> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.name === \"string\"\r\n    )\r\n        return Maybe.map2(\r\n            castId(json.id),\r\n            Utils.castRgba(json.color),\r\n            (id, color) => ({\r\n                id: id,\r\n                name: json.name,\r\n                color: color\r\n            })\r\n        )\r\n    return Maybe.nothing()\r\n}\r\n\r\nexport function castId(json: any): Maybe.Maybe<Id> {\r\n    if (typeof json === \"object\"\r\n        && json.tag === \"task-id\"\r\n        && typeof json.id === \"number\"\r\n    )\r\n        return Maybe.just(taskId(json.id))\r\n    return Maybe.nothing()\r\n}\r\n","import * as Utils from './Utils'\r\n\r\nexport type Html<Evt> =\r\n    | { nodeType: \"node\", tagName: string, attributes: Array<Attribute<Evt>>, children: Array<Html<Evt>> }\r\n    | { nodeType: \"text\", text: string }\r\n\r\nexport function node<Evt>(\r\n    tagName: string,\r\n    attributes: Array<Attribute<Evt>>,\r\n    children: Array<Html<Evt>>\r\n): Html<Evt> {\r\n    return { nodeType: \"node\", tagName, attributes, children }\r\n}\r\n\r\nexport function text<Evt>(text: string): Html<Evt> {\r\n    return { nodeType: \"text\", text }\r\n}\r\n\r\nexport function toElement<Evt>(html: Html<Evt>, dispatch: (evt: Evt) => void): Element | Text {\r\n    switch (html.nodeType) {\r\n        case \"node\":\r\n            const element = document.createElement(html.tagName)\r\n\r\n            for (let attribute of html.attributes)\r\n                toDomAttribute(attribute, dispatch, element)\r\n\r\n            for (let child of html.children)\r\n                element.appendChild(toElement(child, dispatch))\r\n\r\n            return element\r\n\r\n        case \"text\":\r\n            return document.createTextNode(html.text)\r\n    }\r\n}\r\n\r\n// Attr\r\n\r\nexport type Attribute<Evt> =\r\n    | { tag: \"attribute\", name: string, value: string }\r\n    | { tag: \"property\", name: string, value: any }\r\n    | { tag: \"eventHandler\", eventName: string, handler: (event: any) => Evt }\r\n    | { tag: \"style\", property: string, value: string }\r\n\r\nexport function attribute<Evt>(name: string, value: string): Attribute<Evt> {\r\n    return { tag: \"attribute\", name, value }\r\n}\r\n\r\nexport function property<Evt>(name: string, value: any): Attribute<Evt> {\r\n    return { tag: \"property\", name, value }\r\n}\r\n\r\nexport function on<Evt>(eventName: string, handler: (event: any) => Evt): Attribute<Evt> {\r\n    return { tag: \"eventHandler\", eventName, handler }\r\n}\r\n\r\nexport function style<Evt>(property: string, value: string): Attribute<Evt> {\r\n    return { tag: \"style\", property, value }\r\n}\r\n\r\nexport function toDomAttribute<Evt>(attribute: Attribute<Evt>, dispatch: (evt: Evt) => void, $element: Element): void {\r\n    switch (attribute.tag) {\r\n        case \"attribute\":\r\n            $element.setAttribute(attribute.name, attribute.value)\r\n            return\r\n\r\n        case \"property\":\r\n            ($element as any)[attribute.name] = attribute.value\r\n            return\r\n\r\n        case \"eventHandler\":\r\n            ($element as any)[`on${attribute.eventName}`] = (event: any) =>\r\n                dispatch(attribute.handler(event))\r\n\r\n            return\r\n\r\n        case \"style\":\r\n            ($element as any).style[attribute.property] = attribute.value\r\n            return\r\n    }\r\n}\r\n","\r\nimport * as State from './State'\r\nimport * as Update from './Update'\r\nimport * as CreateRecord from './CreateRecord'\r\nimport * as Record from './Record'\r\nimport * as Utils from './Utils'\r\nimport * as Task from './Task'\r\nimport * as Html from './Html'\r\n\r\nexport function inputWithLabel<T>(\r\n    id: string,\r\n    label: string,\r\n    attributes: Array<Html.Attribute<T>>\r\n): Html.Html<T> {\r\n    return Html.node(\r\n        \"label\",\r\n        [\r\n            Html.attribute(\"for\", id),\r\n        ],\r\n        [\r\n            Html.node(\r\n                \"div\",\r\n                [],\r\n                [ Html.text(label) ]\r\n            ),\r\n            Html.node(\r\n                \"input\",\r\n                [\r\n                    Html.attribute(\"id\", id),\r\n                    ...attributes,\r\n                ],\r\n                []\r\n            ),\r\n        ]\r\n    )\r\n}\r\n\r\nexport function inputWithInvisibleLabel<T>(\r\n    id: string,\r\n    label: string,\r\n    attributes: Array<Html.Attribute<T>>\r\n): Html.Html<T> {\r\n    return Html.node(\r\n        \"label\",\r\n        [ Html.attribute(\"for\", id) ],\r\n        [\r\n            Html.node(\r\n                \"div\",\r\n                [\r\n                    Html.style(\"position\", \"absolute\"),\r\n                    Html.style(\"left\", \"-99999px\"),\r\n                    Html.style(\"top\", \"-99999px\"),\r\n                ],\r\n                [ Html.text(label) ]\r\n            ),\r\n            Html.node(\r\n                \"input\",\r\n                [\r\n                    Html.attribute(\"id\", id),\r\n                    ...attributes,\r\n                ],\r\n                []\r\n            ),\r\n        ]\r\n    )\r\n}\r\n\r\nexport function view(state: State.State): Html.Html<Update.Event> {\r\n    return Html.node(\r\n        \"div\",\r\n        [\r\n            Html.attribute(\"id\", \"root\")\r\n        ],\r\n        [\r\n            bodyStyles(),\r\n            CreateRecord.view({\r\n                createRecord: state.createRecord,\r\n                records: state.records,\r\n                tasks: state.tasks,\r\n                createRecordError: state.createRecordError,\r\n                autoCompleteMenu: state.autoCompleteMenu,\r\n                attributes: [\r\n                    Html.style(\"margin\", \"10px\"),\r\n                ],\r\n            }),\r\n            viewRecordTable(state.records, state.tasks)\r\n        ]\r\n    )\r\n}\r\n\r\nfunction viewRecordTable(\r\n    records: Array<Record.Record>,\r\n    tasks: Array<Task.Task>,\r\n): Html.Html<Update.Event> {\r\n    return Html.node(\r\n        \"table\",\r\n        [],\r\n        [\r\n            Html.node(\r\n                \"thead\",\r\n                [],\r\n                [\r\n                    Html.node(\r\n                        \"tr\",\r\n                        [],\r\n                        [\r\n                            Html.node(\"th\", [], [ Html.text(\"Descripción\") ]),\r\n                            Html.node(\"th\", [], [ Html.text(\"Tarea\") ]),\r\n                            Html.node(\"th\", [], [ Html.text(\"Inicio\") ]),\r\n                            Html.node(\"th\", [], [ Html.text(\"Fin\") ]),\r\n                            Html.node(\"th\", [], [ Html.text(\"Duración\") ]),\r\n                        ]\r\n                    )\r\n                ]\r\n            ),\r\n            Html.node(\r\n                \"tbody\",\r\n                [],\r\n                records.map(record =>\r\n                    Html.node(\r\n                        \"tr\",\r\n                        [],\r\n                        Record.view(record, tasks)\r\n                            .map(recordHtml =>\r\n                                Html.node(\"td\", [], [ recordHtml ])\r\n                            )\r\n                    )\r\n                )\r\n            ),\r\n        ]\r\n    )\r\n}\r\n\r\nfunction bodyStyles(): Html.Html<any> {\r\n    return Html.node(\"style\", [], [\r\n        Html.text(`\r\n            body {\r\n                margin: 0;\r\n                background-color: ${Utils.toCssString({ r: 0.97, g: 0.98, b: 0.99, a: 1.0 })};\r\n            }\r\n        `)\r\n    ])\r\n}\r\n","import * as Record from './Record'\r\n\r\nexport type Input =\r\n    | { tag: \"createRecord\", name: CreateRecordInputName }\r\n    | { tag: \"record\", id: Record.Id, name: RecordInputName }\r\n\r\nexport type CreateRecordInputName = \"description\" | \"task\" | \"startTime\"\r\nexport type RecordInputName = \"description\" | \"task\" | \"startTime\" | \"endTime\"\r\n\r\nexport function record(record: Record.Record, name: RecordInputName): Input {\r\n    return { tag: \"record\", id: record.id, name }\r\n}\r\n\r\nexport function createRecord(name: CreateRecordInputName): Input {\r\n    return { tag: \"createRecord\", name }\r\n}\r\n\r\nexport function equals(a: Input, b: Input): boolean {\r\n    if (a.tag === \"createRecord\" && b.tag === \"createRecord\") {\r\n        return a.name === b.name\r\n    }\r\n\r\n    if (a.tag === \"record\" && b.tag === \"record\") {\r\n        return Record.idEq(a.id, b.id) && a.name === b.name\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nexport function toStringId(input: Input): string {\r\n    switch (input.tag) {\r\n        case \"createRecord\":\r\n            return `createRecord-${input.name}`\r\n\r\n        case \"record\":\r\n            return `record-${input.id.id}-${input.name}`\r\n    }\r\n}\r\n","import * as Record from './Record'\r\n\r\nexport type Button =\r\n    | { tag: \"stop\" }\r\n    | { tag: \"play\" }\r\n    | { tag: \"deleteRecord\", recordId: Record.Id }\r\n    | { tag: \"resumeRecord\", recordId: Record.Id }\r\n\r\nexport function stop(): Button {\r\n    return { tag: \"stop\" }\r\n}\r\n\r\nexport function play(): Button {\r\n    return { tag: \"play\" }\r\n}\r\n\r\nexport function deleteRecord(recordId: Record.Id): Button {\r\n    return { tag: \"deleteRecord\", recordId }\r\n}\r\n\r\nexport function resumeRecord(recordId: Record.Id): Button {\r\n    return { tag: \"resumeRecord\", recordId }\r\n}","\r\nimport * as Maybe from './Maybe'\r\nimport * as Utils from './Utils'\r\nimport * as Task from './Task'\r\nimport * as Update from './Update'\r\nimport * as View from './View'\r\nimport * as Levenshtein from './Levenshtein'\r\nimport * as Input from './Input'\r\nimport * as Button from './Button'\r\nimport * as Html from './Html'\r\n\r\nexport type Id = {\r\n    tag: \"recordId\",\r\n    id: number,\r\n}\r\n\r\nexport function recordId(now: Date): Id {\r\n    return { tag: \"recordId\", id: now.getMilliseconds() }\r\n}\r\n\r\nexport function idEq(a: Id, b: Id): boolean {\r\n    return a.id === b.id\r\n}\r\n\r\n// RECORD ---\r\n\r\n\r\nexport type Record = {\r\n    id: Id,\r\n    description: string,\r\n    startInput: string,\r\n    startDate: Date,\r\n    endInput: string,\r\n    endDate: Date,\r\n    taskInput: string,\r\n    taskId: Task.Id,\r\n}\r\n\r\nexport function record(\r\n    description: string,\r\n    startDate: Date,\r\n    endDate: Date,\r\n    id: Id,\r\n    task: Task.Task\r\n): Record {\r\n    return {\r\n        description,\r\n        startInput: Utils.dateToString(startDate),\r\n        startDate,\r\n        endInput: Utils.dateToString(endDate),\r\n        endDate,\r\n        taskId: task.id,\r\n        taskInput: task.name,\r\n        id\r\n    }\r\n}\r\n\r\n\r\nexport function matchesId(id: Id, record: Record): boolean {\r\n    return idEq(id, record.id)\r\n}\r\n\r\nexport function withDescription(description: string, record: Record): Record {\r\n    return { ...record, description }\r\n}\r\n\r\nexport function withTask(taskInput: string, taskId: Maybe.Maybe<Task.Id>, record: Record): Record {\r\n    return { ...record, taskInput, taskId: taskId.withDefault(record.taskId) }\r\n}\r\n\r\nexport function updateStart(startInput: string, record: Record): Record {\r\n    return {\r\n        ...record,\r\n        startInput,\r\n        startDate: Utils.dateFromString(record.startDate, startInput).withDefault(record.startDate)\r\n    }\r\n}\r\n\r\nexport function updateEnd(endInput: string, record: Record): Record {\r\n    return {\r\n        ...record,\r\n        endInput,\r\n        endDate: Utils.dateFromString(record.endDate, endInput).withDefault(record.endDate)\r\n    }\r\n}\r\n\r\n/** If a date is mispelled or the task is invalid, reset the input value to the last valid value. */\r\nexport function normalizeInputs(tasks: Array<Task.Task>, record: Record): Record {\r\n    return {\r\n        ...record,\r\n        startInput: Utils.dateToString(record.startDate),\r\n        endInput: Utils.dateToString(record.endDate),\r\n        taskInput: Maybe\r\n            .fromUndefined(\r\n                tasks.find(task => Task.matchesId(record.taskId, task))\r\n            )\r\n            .map(task => task.name)\r\n            .withDefault(\"\")\r\n    }\r\n}\r\n\r\nexport function view(record: Record, tasks: Array<Task.Task>): Array<Html.Html<Update.Event>> {\r\n    const input = (inputName: Input.RecordInputName) => Input.record(record, inputName)\r\n\r\n    return [\r\n        View.inputWithInvisibleLabel(\r\n            `record-${record.id}-description`,\r\n            'Descripción',\r\n            [\r\n                Html.property(\"value\", record.description),\r\n                Html.on(\"input\", (event: any) => Update.onInput(input(\"description\"), event?.target?.value || \"\")),\r\n                Html.on(\"blur\", (_) => Update.gotRecordBlur(record.id)),\r\n            ]\r\n        ),\r\n        View.inputWithInvisibleLabel(\r\n            `record-${record.id}-task`,\r\n            'Tarea',\r\n            [\r\n                Html.property(\"value\", record.taskInput),\r\n                Html.on(\"input\", (event: any) => Update.onInput(input(\"task\"), event?.target?.value || \"\")),\r\n                Html.on(\"blur\", (_) => Update.gotRecordBlur(record.id))\r\n            ]\r\n        ),\r\n        View.inputWithInvisibleLabel(\r\n            `record-${record.id}-start`,\r\n            'Tiempo de inicio',\r\n            [\r\n                Html.property(\"value\", record.startInput),\r\n                Html.on(\"input\", (event: any) => Update.onInput(input(\"startTime\"), event?.target?.value || \"\")),\r\n                Html.on(\"blur\", (_) => Update.gotRecordBlur(record.id))\r\n            ]\r\n        ),\r\n        View.inputWithInvisibleLabel(\r\n            `record-${record.id}-end`,\r\n            'Tiempo de fin',\r\n            [\r\n                Html.property(\"value\", record.endInput),\r\n                Html.on(\"input\", (event: any) => Update.onInput(input(\"endTime\"), event?.target?.value || \"\")),\r\n                Html.on(\"blur\", (_) => Update.gotRecordBlur(record.id))\r\n            ]\r\n        ),\r\n        Html.text(\r\n            Utils.timeDifferenceToString(Utils.dateDifference(record.endDate, record.startDate))\r\n        ),\r\n        Html.node(\r\n            \"button\",\r\n            [\r\n                Html.on(\"click\", (_) => Update.clickedButton(Button.deleteRecord(record.id))),\r\n            ],\r\n            [Html.text(\"Delete\")]\r\n        ),\r\n        Html.node(\r\n            \"button\",\r\n            [\r\n                Html.on(\"click\", (_) => Update.clickedButton(Button.resumeRecord(record.id))),\r\n            ],\r\n            [Html.text(\"Resume\")]\r\n        ),\r\n    ]\r\n}\r\n\r\nexport function mapWithId(records: Array<Record>, id: Id, fn: (record: Record) => Record): Array<Record> {\r\n    return records.map(record =>\r\n        matchesId(id, record)\r\n            ? fn(record)\r\n            : record\r\n    )\r\n}\r\n\r\nexport function deleteWithId(records: Array<Record>, id: Id): Array<Record> {\r\n    return records.filter(record => !matchesId(id, record))\r\n}\r\n\r\nexport function castId(json: any): Maybe.Maybe<Id> {\r\n    if (typeof json === \"object\"\r\n        && json.tag === \"recordId\"\r\n        && typeof json.id === \"number\"\r\n    )\r\n        return Maybe.just(recordId(new Date(json.id)))\r\n    return Maybe.nothing()\r\n}\r\n\r\nexport function cast(json: any): Maybe.Maybe<Record> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.description === \"string\"\r\n        && typeof json.startInput === \"string\"\r\n        && typeof json.startDate === \"string\"\r\n        && typeof json.endInput === \"string\"\r\n        && typeof json.endDate === \"string\"\r\n        && typeof json.taskInput === \"string\"\r\n    )\r\n        return Maybe.map2(\r\n            castId(json.id),\r\n            Task.castId(json.taskId),\r\n            (id, taskId) => ({\r\n                id, taskId,\r\n                description: json.description,\r\n                startInput: json.startInput,\r\n                endInput: json.endInput,\r\n                startDate: new Date(json.startDate),\r\n                endDate: new Date(json.endDate),\r\n                taskInput: json.taskInput\r\n            })\r\n        )\r\n    return Maybe.nothing()\r\n}\r\n\r\nexport function search(query: string, records: Array<Record>): Array<Record> {\r\n    if (query === \"\")\r\n        return []\r\n    else\r\n        return records.map<[Record, number]>(record =>\r\n            [record, Levenshtein.distance(query.toLowerCase(), record.description.toLowerCase())]\r\n        )\r\n            .sort((a: [Record, number], b: [Record, number]) => {\r\n                const [recordA, distanceA] = a\r\n                const [recordB, distanceB] = b\r\n\r\n                return distanceA - distanceB\r\n            })\r\n            .map(([record, _]) => record)\r\n}\r\n\r\nexport function filterUsingTask(taskId: Task.Id, records: Array<Record>): Array<Record> {\r\n    return records.filter(record => Task.idEq(taskId, record.taskId))\r\n}\r\n","import * as State from './State'\r\nimport * as Maybe from './Maybe'\r\n\r\nexport type Effect<A> = {\r\n    tag: \"Effect\",\r\n    perform: (dispatch: (event: A) => void) => void\r\n}\r\n\r\nexport function saveToLocalStorage<T>(state: State.State): Effect<T> {\r\n    return {\r\n        tag: \"Effect\",\r\n        perform: (_) =>\r\n            localStorage.setItem(\"state\", JSON.stringify(state))\r\n    }\r\n}\r\n\r\nexport function getFromLocalStorage(): Effect<Maybe.Maybe<State.State>> {\r\n    return {\r\n        tag: \"Effect\",\r\n        perform: (dispatch) => {\r\n            const stateString = localStorage.getItem(\"state\")\r\n\r\n            if (stateString === null) {\r\n                dispatch(Maybe.nothing())\r\n            } else {\r\n                try {\r\n                    dispatch(State.cast(JSON.parse(stateString)))\r\n                } catch (e) {\r\n                    dispatch(Maybe.nothing())\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function preventDefault<T>(preventDefault: () => void): Effect<T> {\r\n    return {\r\n        tag: \"Effect\",\r\n        perform: (_) => preventDefault()\r\n    }\r\n}\r\n\r\nexport function none<T>(): Effect<T> {\r\n    return {\r\n        tag: \"Effect\",\r\n        perform: (_) => { }\r\n    }\r\n}\r\n\r\nexport function batch<T>(effects: Array<Effect<T>>): Effect<T> {\r\n    return {\r\n        tag: \"Effect\",\r\n        perform: (dispatch) => {\r\n            effects.forEach(effect => effect.perform(dispatch))\r\n        }\r\n    }\r\n}\r\n","\r\nimport * as Input from './Input'\r\nimport * as View from './View'\r\nimport * as CreateRecord from './CreateRecord'\r\nimport * as Record from './Record'\r\nimport * as Task from './Task'\r\nimport * as Html from './Html'\r\n\r\nexport type AutoCompleteMenu =\r\n    | { tag: \"ClosedAutoCompleteMenu\" }\r\n    | { tag: \"OpenAutoCompleteMenu\", input: Input.Input, index: number }\r\n\r\n\r\nexport function closed(): AutoCompleteMenu {\r\n    return { tag: \"ClosedAutoCompleteMenu\" }\r\n}\r\n\r\nexport function open(input: Input.Input): AutoCompleteMenu {\r\n    return {\r\n        tag: \"OpenAutoCompleteMenu\",\r\n        input, index: -1,\r\n    }\r\n}\r\n\r\nexport type Key =\r\n    | \"Enter\"\r\n    | \"ArrowDown\"\r\n    | \"ArrowUp\"\r\n    | \"Escape\"\r\n    | undefined\r\n\r\nfunction keyFromString(string: string): Key {\r\n    switch (string) {\r\n        case \"Enter\":\r\n            return \"Enter\"\r\n\r\n        case \"ArrowUp\":\r\n            return \"ArrowUp\"\r\n\r\n        case \"ArrowDown\":\r\n            return \"ArrowDown\"\r\n\r\n        case \"Escape\":\r\n            return \"Escape\"\r\n\r\n        default:\r\n            return undefined\r\n    }\r\n}\r\n\r\nexport function inputWithLabel<T>(args: {\r\n    input: Input.Input,\r\n    createRecord: CreateRecord.CreateRecord,\r\n    records: Array<Record.Record>,\r\n    tasks: Array<Task.Task>,\r\n    label: string,\r\n    value: string,\r\n    attributes: Array<Html.Attribute<T>>,\r\n    onAutoCompleteItemClick: (input: Input.Input, index: number) => T,\r\n    autoCompleteMenu: AutoCompleteMenu,\r\n    inputAttributes: Array<Html.Attribute<T>>,\r\n}): Html.Html<T> {\r\n    const input = View.inputWithLabel<T>(\r\n        Input.toStringId(args.input),\r\n        args.label,\r\n        [\r\n            ...args.inputAttributes,\r\n            Html.property(\"value\", args.value),\r\n        ],\r\n    )\r\n\r\n    if (args.autoCompleteMenu.tag === \"OpenAutoCompleteMenu\"\r\n        && Input.equals(args.input, args.autoCompleteMenu.input)\r\n    ) {\r\n        return Html.node(\r\n            \"div\",\r\n            [\r\n                ...args.attributes,\r\n                Html.style(\"position\", \"relative\"),\r\n            ],\r\n            [\r\n                input,\r\n                Html.node(\r\n                    \"div\",\r\n                    [\r\n                        Html.style(\"position\", \"absolute\"),\r\n                        Html.style(\"top\", \"100%\"),\r\n                        Html.style(\"backgroundColor\", \"white\"),\r\n                        Html.style(\"zIndex\", \"20\"),\r\n                    ],\r\n                    menuItems<T>(\r\n                        getItems(args.input, args.createRecord, args.records, args.tasks),\r\n                        (index) => args.onAutoCompleteItemClick(args.input, index),\r\n                        args.autoCompleteMenu.index\r\n                    )\r\n                )\r\n            ]\r\n        )\r\n    }\r\n\r\n    return Html.node(\"div\", args.attributes, [input])\r\n}\r\n\r\nfunction menuItems<T>(items: Array<string>, onClick: (i: number) => T, index: number): Array<Html.Html<T>> {\r\n    return items.map((item, i) => {\r\n        if (index === i)\r\n            return Html.node(\r\n                \"div\",\r\n                [\r\n                    Html.style(\"backgroundColor\", \"rgb(220, 220, 220)\"),\r\n                ],\r\n                [\r\n                    Html.text(item)\r\n                ]\r\n            )\r\n        else\r\n            return Html.node(\r\n                \"div\",\r\n                [\r\n                    Html.on(\"mousedown\", (_) => onClick(i)),\r\n                ],\r\n                [\r\n                    Html.text(item)\r\n                ]\r\n            )\r\n    })\r\n}\r\n\r\nexport function afterKeyDown(\r\n    input: Input.Input,\r\n    key: Key,\r\n    numberOfItems: number,\r\n    autoCompleteMenu: AutoCompleteMenu\r\n): AutoCompleteMenu {\r\n    switch (autoCompleteMenu.tag) {\r\n        case \"ClosedAutoCompleteMenu\":\r\n            switch (key) {\r\n                case \"ArrowDown\":\r\n                    return {\r\n                        tag: \"OpenAutoCompleteMenu\",\r\n                        input,\r\n                        index: -1,\r\n                    }\r\n            }\r\n            return autoCompleteMenu\r\n\r\n        case \"OpenAutoCompleteMenu\":\r\n            switch (key) {\r\n                case \"ArrowDown\":\r\n                    return {\r\n                        tag: \"OpenAutoCompleteMenu\",\r\n                        input: autoCompleteMenu.input,\r\n                        index: Math.min(numberOfItems - 1, autoCompleteMenu.index + 1),\r\n                    }\r\n\r\n                case \"ArrowUp\":\r\n                    return {\r\n                        tag: \"OpenAutoCompleteMenu\",\r\n                        input: autoCompleteMenu.input,\r\n                        index: Math.max(-1, autoCompleteMenu.index - 1),\r\n                    }\r\n\r\n                case \"Enter\":\r\n                    return { tag: \"ClosedAutoCompleteMenu\" }\r\n\r\n                case \"Escape\":\r\n                    return { tag: \"ClosedAutoCompleteMenu\" }\r\n\r\n                case undefined:\r\n                    return {\r\n                        tag: \"OpenAutoCompleteMenu\",\r\n                        input: autoCompleteMenu.input,\r\n                        index: -1,\r\n                    }\r\n            }\r\n    }\r\n}\r\n\r\n\r\nexport function getItems(\r\n    input: Input.Input,\r\n    createRecord: CreateRecord.CreateRecord,\r\n    records: Array<Record.Record>,\r\n    tasks: Array<Task.Task>\r\n): Array<string> {\r\n    switch (input.tag) {\r\n        case \"createRecord\":\r\n            switch (input.name) {\r\n                case \"task\":\r\n                    return Task.search(createRecord.taskInput, tasks).map(task => task.name)\r\n\r\n                case \"description\":\r\n                    return Record.search(\r\n                        createRecord.description,\r\n                        createRecord.taskId\r\n                            .map(taskId => Record.filterUsingTask(taskId, records))\r\n                            .withDefault(records)\r\n                    ).map(record => record.description)\r\n                        // Remove duplicates\r\n                        .filter((description, i, array) =>\r\n                            i === array.length || description !== array[i + 1]\r\n                        )\r\n                        .slice(0, 5)\r\n            }\r\n            return []\r\n\r\n        case \"record\":\r\n            throw Error(\"TODO\")\r\n\r\n            switch (input.name) {\r\n            }\r\n    }\r\n    return []\r\n}\r\n\r\n\r\nexport function keyDownEventKeyDecoder(event: any): Key {\r\n    switch (event?.key) {\r\n        case \"Enter\":\r\n            return \"Enter\"\r\n\r\n        case \"ArrowDown\":\r\n            return \"ArrowDown\"\r\n\r\n        case \"ArrowUp\":\r\n            return \"ArrowUp\"\r\n\r\n        case \"Escape\":\r\n            return \"Escape\"\r\n\r\n        default:\r\n            return undefined\r\n    }\r\n}\r\n","import * as State from './State'\r\nimport * as Maybe from './Maybe'\r\nimport * as Record from './Record'\r\nimport * as CreateRecord from './CreateRecord'\r\nimport * as Task from './Task'\r\nimport * as Utils from './Utils'\r\nimport * as Input from './Input'\r\nimport * as Effect from './Effect'\r\nimport * as Button from './Button'\r\nimport * as AutoCompleteMenu from './AutoCompleteMenu'\r\n\r\n\r\n\r\n/** Event is what's typically called an \"action\" in Redux\r\n * \r\n*/\r\nexport type Event =\r\n    | { tag: \"RecordBlur\", id: Record.Id }\r\n    | { tag: \"CreateRecordBlur\" }\r\n    | { tag: \"onInput\", input: Input.Input, value: string }\r\n    | { tag: \"onFocus\", input: Input.Input }\r\n    | { tag: \"onBlur\", input: Input.Input }\r\n    | { tag: \"onKeyDown\", input: Input.Input, key: AutoCompleteMenu.Key }\r\n    | { tag: \"ButtonClick\", button: Button.Button }\r\n    | { tag: \"onAutoCompleteItemClick\", input: Input.Input, index: number }\r\n\r\nexport function onInput(input: Input.Input, value: string): Event {\r\n    return {\r\n        tag: \"onInput\",\r\n        input, value,\r\n    }\r\n}\r\n\r\nexport function onFocus(input: Input.Input): Event {\r\n    return {\r\n        tag: \"onFocus\",\r\n        input\r\n    }\r\n}\r\n\r\nexport function onBlur(input: Input.Input): Event {\r\n    return {\r\n        tag: \"onBlur\",\r\n        input\r\n    }\r\n}\r\n\r\nexport function onKeyDown(input: Input.Input, key: AutoCompleteMenu.Key): Event {\r\n    return {\r\n        tag: \"onKeyDown\",\r\n        input, key,\r\n    }\r\n}\r\n\r\nexport function clickedButton(button: Button.Button): Event {\r\n    return {\r\n        tag: \"ButtonClick\",\r\n        button\r\n    }\r\n}\r\n\r\nexport function gotRecordBlur(id: Record.Id): Event {\r\n    return {\r\n        tag: \"RecordBlur\",\r\n        id\r\n    }\r\n}\r\n\r\nexport function gotCreateRecordBlur(): Event {\r\n    return { tag: \"CreateRecordBlur\" }\r\n}\r\n\r\nexport function onAutoCompleteItemClick(input: Input.Input, index: number): Event {\r\n    return { tag: \"onAutoCompleteItemClick\", input, index }\r\n}\r\n\r\n/** The type of the dispatch function\r\n * \r\n */\r\nexport type Dispatch = (event: Event) => void\r\n\r\n\r\n\r\n// UPDATE ---\r\n\r\n/** The main update function (\"reducer\"). Decides how to modify state when an event comes in. Also performs side-effects\r\n * arbitrarily (BUT it's the ONLY function that can perform side effects in our _whole_ application!)\r\n * \r\n */\r\nexport function update(state: State.State, event: Event): [State.State, Effect.Effect<Event>] {\r\n    const [newState, effect] = update_(state, event);\r\n\r\n    return [\r\n        newState,\r\n        Effect.batch([\r\n            Effect.saveToLocalStorage(newState),\r\n            effect,\r\n        ])\r\n    ]\r\n}\r\n\r\nfunction update_(state: State.State, event: Event): [State.State, Effect.Effect<Event>] {\r\n    switch (event.tag) {\r\n        case \"onInput\":\r\n            return [\r\n                updateInput(event.input, event.value, state),\r\n                Effect.none()\r\n            ]\r\n\r\n        case \"onFocus\":\r\n            return [\r\n                {\r\n                    ...state,\r\n                    autoCompleteMenu: AutoCompleteMenu.open(event.input)\r\n                },\r\n                Effect.none()\r\n            ]\r\n\r\n        case \"onBlur\":\r\n            return [\r\n                {\r\n                    ...state,\r\n                    autoCompleteMenu: AutoCompleteMenu.closed()\r\n                },\r\n                Effect.none()\r\n            ]\r\n\r\n        case \"onKeyDown\":\r\n            var state_ = state\r\n\r\n            // If we press enter, alter the selected input's value.\r\n            if (event.key === \"Enter\" && state.autoCompleteMenu.tag === \"OpenAutoCompleteMenu\") {\r\n                state_ = Maybe.fromUndefined(\r\n                    AutoCompleteMenu.getItems(\r\n                        event.input,\r\n                        state.createRecord,\r\n                        state.records,\r\n                        state.tasks\r\n                    )[state.autoCompleteMenu.index]\r\n                )\r\n                    .map(inputValue => updateInput(event.input, inputValue, state))\r\n                    .withDefault(state)\r\n            }\r\n\r\n            return [\r\n                {\r\n                    ...state_,\r\n                    autoCompleteMenu: AutoCompleteMenu.afterKeyDown(\r\n                        event.input,\r\n                        event.key,\r\n                        AutoCompleteMenu.getItems(event.input, state.createRecord, state.records, state.tasks).length,\r\n                        state.autoCompleteMenu\r\n                    )\r\n                },\r\n                Effect.none()\r\n            ]\r\n\r\n        case \"CreateRecordBlur\":\r\n            return [\r\n                {\r\n                    ...state,\r\n                    createRecord: CreateRecord.normalizeInputs(state.tasks, state.createRecord)\r\n                },\r\n                Effect.none()\r\n            ]\r\n\r\n        case \"RecordBlur\":\r\n            return [\r\n                {\r\n                    ...state,\r\n                    records: Record.mapWithId(\r\n                        state.records,\r\n                        event.id,\r\n                        record => Record.normalizeInputs(state.tasks, record),\r\n                    )\r\n                },\r\n                Effect.none()\r\n            ]\r\n\r\n        case \"ButtonClick\":\r\n            const button = event.button\r\n\r\n            switch (button.tag) {\r\n                case \"play\":\r\n                    return [\r\n                        {\r\n                            ...state,\r\n                            createRecord: {\r\n                                ...state.createRecord,\r\n                                start: Maybe.just(CreateRecord.start(new Date()))\r\n                            }\r\n                        },\r\n                        Effect.none()\r\n                    ]\r\n\r\n                case \"stop\":\r\n                    return [\r\n                        CreateRecord.toRecord(state.tasks, new Date(), state.createRecord)\r\n                            .match(\r\n                                record =>\r\n                                    addRecord(\r\n                                        record,\r\n                                        {\r\n                                            ...state,\r\n                                            createRecord: CreateRecord.empty(\"\"),\r\n                                            createRecordError: Maybe.nothing(),\r\n                                        }\r\n                                    ),\r\n                                validationError => ({\r\n                                    ...state,\r\n                                    createRecordError: Maybe.just(validationError)\r\n                                })\r\n                            ),\r\n                        Effect.none()\r\n                    ]\r\n\r\n                case \"deleteRecord\":\r\n                    return [\r\n                        {\r\n                            ...state,\r\n                            records: Record.deleteWithId(state.records, button.recordId),\r\n                        },\r\n                        Effect.none()\r\n                    ]\r\n\r\n                case \"resumeRecord\":\r\n                    return [\r\n                        {\r\n                            ...state,\r\n                            createRecord:\r\n                                // Find record\r\n                                Maybe.fromUndefined(\r\n                                    state.records.find(record => Record.matchesId(button.recordId, record))\r\n                                )\r\n                                    // Copy its description and task to createRecord\r\n                                    .map(record =>\r\n                                        CreateRecord.fromRecord(record, state.tasks)\r\n                                    )\r\n                                    // Start it immediately if it's not running already\r\n                                    .map(createRecord => {\r\n                                        if (createRecord.start.tag === \"nothing\") {\r\n                                            return {\r\n                                                ...createRecord,\r\n                                                start: Maybe.just(CreateRecord.start(new Date()))\r\n                                            }\r\n                                        }\r\n                                        return createRecord\r\n                                    })\r\n                                    // Don't do nothing if we didn't find the record\r\n                                    .withDefault(state.createRecord)\r\n                        },\r\n                        Effect.none()\r\n                    ]\r\n            }\r\n            break\r\n\r\n        case \"onAutoCompleteItemClick\":\r\n            return [\r\n                Maybe.fromUndefined(\r\n                    AutoCompleteMenu.getItems(\r\n                        event.input,\r\n                        state.createRecord,\r\n                        state.records,\r\n                        state.tasks\r\n                    )[event.index]\r\n                )\r\n                    .map(inputValue => updateInput(event.input, inputValue, state))\r\n                    .withDefault(state),\r\n                Effect.none()\r\n            ]\r\n    }\r\n}\r\n\r\nfunction addRecord(record: Record.Record, state: State.State): State.State {\r\n    return {\r\n        ...state,\r\n        records: [record, ...state.records]\r\n    }\r\n}\r\n\r\n\r\nfunction searchTaskId(inputValue: string, tasks: Array<Task.Task>): Maybe.Maybe<Task.Id> {\r\n    return inputValue === \"\"\r\n        ? Maybe.nothing()\r\n        : Maybe.fromUndefined(Task.search(inputValue, tasks)[0])\r\n            .map(task => task.id)\r\n}\r\n\r\nfunction updateInput(\r\n    input: Input.Input,\r\n    value: string,\r\n    state: State.State\r\n): State.State {\r\n    switch (input.tag) {\r\n        case \"createRecord\":\r\n            return {\r\n                ...state,\r\n                createRecord: updateCreateRecordInput(input.name, value, state.tasks, state.createRecord)\r\n            }\r\n\r\n        case \"record\":\r\n            return {\r\n                ...state,\r\n                records: Record.mapWithId(\r\n                    state.records,\r\n                    input.id,\r\n                    record => updateRecordInput(input.name, value, state.tasks, record)\r\n                )\r\n            }\r\n    }\r\n}\r\n\r\nfunction updateCreateRecordInput(\r\n    inputName: Input.CreateRecordInputName,\r\n    value: string,\r\n    tasks: Array<Task.Task>,\r\n    createRecord: CreateRecord.CreateRecord\r\n): CreateRecord.CreateRecord {\r\n    switch (inputName) {\r\n        case \"description\":\r\n            return { ...createRecord, description: value }\r\n        case \"task\":\r\n            return CreateRecord.withTask(\r\n                value,\r\n                searchTaskId(value, tasks),\r\n                createRecord\r\n            )\r\n        case \"startTime\":\r\n            return CreateRecord.updateStartTime(value, createRecord)\r\n    }\r\n}\r\n\r\nfunction updateRecordInput(\r\n    input: Input.RecordInputName,\r\n    value: string,\r\n    tasks: Array<Task.Task>,\r\n    record: Record.Record\r\n): Record.Record {\r\n    switch (input) {\r\n        case \"description\":\r\n            return { ...record, description: value }\r\n\r\n        case \"task\":\r\n            return Record.withTask(\r\n                value,\r\n                searchTaskId(value, tasks),\r\n                record\r\n            )\r\n\r\n        case \"startTime\":\r\n            return Record.updateStart(value, record)\r\n\r\n        case \"endTime\":\r\n            return Record.updateEnd(value, record)\r\n    }\r\n}\r\n","import * as Maybe from './Maybe'\r\n\r\ntype ResultInterface<A, E> = {\r\n    map: <B>(fn: (a: A) => B) => Result<B, E>,\r\n    andThen: <B>(fn: (a: A) => Result<B, E>) => Result<B, E>,\r\n    mapError: <F>(fn: (e: E) => F) => Result<A, F>,\r\n    withDefault: (default_: A) => A,\r\n    match: <B>(mapValue: (a: A) => B, mapError: (e: E) => B) => B,\r\n}\r\n\r\nexport type Result<A, E> =\r\n    | { tag: 'ok'; value: A } & ResultInterface<A, E>\r\n    | { tag: 'error'; error: E } & ResultInterface<A, E>\r\n\r\nexport function ok<A, E>(value: A): Result<A, E> {\r\n    return {\r\n        tag: 'ok',\r\n        value,\r\n        map: fn => ok(fn(value)),\r\n        andThen: fn => fn(value),\r\n        mapError: _ => ok(value),\r\n        withDefault: _ => value,\r\n        match: (fn, _) => fn(value),\r\n    }\r\n}\r\n\r\nexport function error<A, E>(err: E): Result<A, E> {\r\n    return {\r\n        tag: 'error',\r\n        error: err,\r\n        map: _ => error(err),\r\n        andThen: _ => error(err),\r\n        mapError: fn => error(fn(err)),\r\n        withDefault: default_ => default_,\r\n        match: (_, fn) => fn(err),\r\n    }\r\n}\r\n\r\nexport function map2<A, B, C, E>(\r\n    resultA: Result<A, E>,\r\n    resultB: Result<B, E>,\r\n    fn: (a: A, b: B) => C\r\n): Result<C, E> {\r\n    return resultA.andThen(a =>\r\n        resultB.map(b => fn(a, b))\r\n    )\r\n}\r\n\r\nexport function andMap<A, B, E>(\r\n    wrappedFunction: Result<(a: A) => B, E>,\r\n    wrappedValue: Result<A, E>,\r\n): Result<B, E> {\r\n    if (wrappedFunction.tag === 'ok') {\r\n        return wrappedValue.tag === 'ok'\r\n            ? ok(wrappedFunction.value(wrappedValue.value))\r\n            : error(wrappedValue.error)\r\n    }\r\n    return error(wrappedFunction.error)\r\n}\r\n\r\nexport function toMaybe<A, E>(result: Result<A, E>): Maybe.Maybe<A> {\r\n    return result.tag === 'ok' ? Maybe.just(result.value) : Maybe.nothing()\r\n}\r\n\r\nexport function fromMaybe<A, E>(err: E, maybe: Maybe.Maybe<A>): Result<A, E> {\r\n    return maybe\r\n        .map(a => ok<A, E>(a))\r\n        .withDefault(error(err))\r\n}\r\n","\r\nimport * as Update from \"./Update\"\r\nimport * as Maybe from './Maybe'\r\nimport * as Task from \"./Task\"\r\nimport * as View from './View'\r\nimport * as Utils from './Utils'\r\nimport * as Result from './Result'\r\nimport * as Record from './Record'\r\nimport * as Input from './Input'\r\nimport * as Button from './Button'\r\nimport * as AutoCompleteMenu from './AutoCompleteMenu'\r\n\r\nimport * as Html from './Html'\r\n\r\nexport type CreateRecord = {\r\n    description: string,\r\n    start: Maybe.Maybe<{ input: string, date: Date }>,\r\n    taskId: Maybe.Maybe<Task.Id>,\r\n    taskInput: string,\r\n}\r\n\r\nexport function empty(description: string): CreateRecord {\r\n    return {\r\n        description,\r\n        start: Maybe.nothing(),\r\n        taskId: Maybe.nothing(),\r\n        taskInput: \"\"\r\n    }\r\n}\r\n\r\nexport function start(date: Date): { input: string, date: Date } {\r\n    return {\r\n        input: Utils.dateToString(date),\r\n        date\r\n    }\r\n}\r\n\r\n\r\nexport function withTask(taskInput: string, taskId: Maybe.Maybe<Task.Id>, createRecord: CreateRecord): CreateRecord {\r\n    return { ...createRecord, taskId, taskInput }\r\n}\r\n\r\nexport function updateStartTime(startInput: string, createRecord: CreateRecord): CreateRecord {\r\n    return {\r\n        ...createRecord,\r\n        start: createRecord.start.map(start => ({\r\n            input: startInput,\r\n            date: Utils.dateFromString(start.date, startInput).withDefault(start.date)\r\n        }))\r\n    }\r\n}\r\n\r\nexport function normalizeInputs(tasks: Array<Task.Task>, createRecord: CreateRecord): CreateRecord {\r\n    return {\r\n        ...createRecord,\r\n        start: createRecord.start.map(start => ({\r\n            input: Utils.dateToString(start.date),\r\n            date: start.date\r\n        })),\r\n        taskInput: createRecord.taskId.andThen(taskId =>\r\n            Maybe.fromUndefined(tasks.find(task => Task.matchesId(taskId, task)))\r\n        )\r\n            .map(task => task.name)\r\n            .withDefault(\"\")\r\n    }\r\n}\r\n\r\n\r\nexport type Error = {\r\n    emptyDescription: boolean,\r\n    emptyTask: boolean,\r\n}\r\n\r\nexport function toRecord(\r\n    tasks: Array<Task.Task>,\r\n    endDate: Date,\r\n    createRecord: CreateRecord,\r\n): Result.Result<Record.Record, Error> {\r\n    const errors = {\r\n        emptyDescription: createRecord.description.trim() === \"\",\r\n        emptyTask: createRecord.taskId.map(_ => false).withDefault(true)\r\n    }\r\n\r\n    if (errors.emptyDescription || errors.emptyTask)\r\n        return Result.error<Record.Record, Error>(errors)\r\n\r\n    return Result.fromMaybe<Record.Record, Error>(\r\n        errors,\r\n        Maybe\r\n            .map2(\r\n                createRecord.start,\r\n                createRecord.taskId,\r\n                (start, taskId) =>\r\n                    Maybe\r\n                        .fromUndefined(tasks.find(task => Task.matchesId(taskId, task)))\r\n                        .map(task =>\r\n                            Record.record(\r\n                                createRecord.description,\r\n                                start.date,\r\n                                endDate,\r\n                                Record.recordId(endDate),\r\n                                task\r\n                            )\r\n                        )\r\n            )\r\n            .andThen(m => m)\r\n    )\r\n}\r\n\r\nexport function view(args: {\r\n    createRecord: CreateRecord,\r\n    records: Array<Record.Record>,\r\n    tasks: Array<Task.Task>,\r\n    createRecordError: Maybe.Maybe<Error>,\r\n    autoCompleteMenu: AutoCompleteMenu.AutoCompleteMenu,\r\n    attributes: Array<Html.Attribute<Update.Event>>,\r\n}): Html.Html<Update.Event> {\r\n    const task = args.createRecord.taskId.andThen(taskId => Task.find(taskId, args.tasks))\r\n\r\n    const errorStyles: Array<Html.Attribute<Update.Event>> = [\r\n        Html.style(\"borderColor\", \"red\")\r\n    ]\r\n\r\n    const descriptionInput = Input.createRecord(\"description\")\r\n    const taskInput = Input.createRecord(\"task\")\r\n\r\n    return Html.node(\r\n        \"div\",\r\n        args.attributes,\r\n        [\r\n            AutoCompleteMenu.inputWithLabel<Update.Event>({\r\n                input: descriptionInput,\r\n                createRecord: args.createRecord,\r\n                records: args.records,\r\n                tasks: args.tasks,\r\n                label: \"Description\",\r\n                value: args.createRecord.description,\r\n                attributes: [],\r\n                onAutoCompleteItemClick: (input, index) => Update.onAutoCompleteItemClick(input, index),\r\n                autoCompleteMenu: args.autoCompleteMenu,\r\n                inputAttributes: [\r\n                    ...args.createRecordError\r\n                        .map(error => error.emptyDescription ? errorStyles : [])\r\n                        .withDefault([]),\r\n                    Html.on(\"input\", (event: any) =>\r\n                        Update.onInput(descriptionInput, event?.target?.value || \"\")\r\n                    ),\r\n                    Html.on(\"focus\", (_) =>\r\n                        Update.onFocus(descriptionInput)\r\n                    ),\r\n                    Html.on(\"blur\", (_) =>\r\n                        Update.onBlur(descriptionInput)\r\n                    ),\r\n                    Html.on(\"keydown\", (event: any) =>\r\n                        Update.onKeyDown(descriptionInput, AutoCompleteMenu.keyDownEventKeyDecoder(event))\r\n                    ),\r\n                ]\r\n            }),\r\n            AutoCompleteMenu.inputWithLabel({\r\n                input: Input.createRecord(\"task\"),\r\n                createRecord: args.createRecord,\r\n                records: args.records,\r\n                tasks: args.tasks,\r\n                label: \"Task\",\r\n                value: args.createRecord.taskInput,\r\n                attributes: [],\r\n                onAutoCompleteItemClick: (input, index) => Update.onAutoCompleteItemClick(input, index),\r\n                autoCompleteMenu: args.autoCompleteMenu,\r\n                inputAttributes: [\r\n                    ...args.createRecordError\r\n                        .map(error => error.emptyTask ? errorStyles : [])\r\n                        .withDefault([]),\r\n                    Html.on(\"input\", (event: any) =>\r\n                        Update.onInput(taskInput, event?.target?.value || \"\")\r\n                    ),\r\n                    Html.on(\"focus\", (_) =>\r\n                        Update.onFocus(taskInput)\r\n                    ),\r\n                    Html.on(\"blur\", (_) =>\r\n                        Update.onBlur(taskInput)\r\n                    ),\r\n                    Html.on(\"keydown\", (event: any) =>\r\n                        Update.onKeyDown(taskInput, AutoCompleteMenu.keyDownEventKeyDecoder(event))\r\n                    ),\r\n                ]\r\n            }),\r\n            Html.node(\r\n                \"div\",\r\n                [],\r\n                args.createRecord.start.map<Array<Html.Html<Update.Event>>>(start => [\r\n                    View.inputWithLabel(\r\n                        \"create-record-start-time\",\r\n                        \"Start time\",\r\n                        [\r\n                            Html.property(\"value\", start.input),\r\n                            Html.on(\"input\", (event: any) =>\r\n                                Update.onInput(Input.createRecord(\"startTime\"), event?.target?.value || \"\"))\r\n                        ],\r\n                    ),\r\n                    Html.node(\r\n                        \"div\",\r\n                        [],\r\n                        [\r\n                            Html.node(\r\n                                \"button\",\r\n                                [\r\n                                    Html.on(\"click\", (event: any) => Update.clickedButton(Button.stop()))\r\n                                ],\r\n                                [\r\n                                    Html.text(\"Stop\"),\r\n                                ]\r\n                            )\r\n                        ]\r\n                    )\r\n                ])\r\n                    .withDefault([\r\n                        Html.node(\r\n                            \"button\",\r\n                            [\r\n                                Html.on(\"click\", (_) => Update.clickedButton(Button.play()))\r\n                            ],\r\n                            [\r\n                                Html.text(\"Play\")\r\n                            ]\r\n                        )\r\n                    ])\r\n            )\r\n            ,\r\n        ]\r\n    )\r\n}\r\n\r\n\r\nfunction castStart(json: any): Maybe.Maybe<{ input: string, date: Date }> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.input === \"string\"\r\n        && typeof json.date === \"string\"\r\n    )\r\n        return Maybe.just<{ input: string, date: Date }>({\r\n            input: json.input,\r\n            date: new Date(json.date)\r\n        })\r\n    else\r\n        return Maybe.nothing()\r\n}\r\n\r\nexport function cast(json: any): Maybe.Maybe<CreateRecord> {\r\n    if (typeof json === \"object\"\r\n        && typeof json.description === \"string\"\r\n        && typeof json.taskInput === \"string\"\r\n    )\r\n        return Maybe.map2(\r\n            Maybe.cast(json.start, castStart),\r\n            Maybe.cast(json.taskId, Task.castId),\r\n            (start, taskId) => ({\r\n                description: json.description,\r\n                start: start,\r\n                taskId: taskId,\r\n                taskInput: json.taskInput\r\n            })\r\n        )\r\n    else\r\n        return Maybe.nothing()\r\n}\r\n\r\nexport function fromRecord(record: Record.Record, tasks: Array<Task.Task>): CreateRecord {\r\n    return {\r\n        description: record.description,\r\n        start: Maybe.nothing(),\r\n        taskId: Maybe.just(record.taskId),\r\n        taskInput: Maybe.fromUndefined(\r\n            tasks.find(task => Task.matchesId(record.taskId, task))\r\n        )\r\n            .map(task => task.name)\r\n            .withDefault(\"\")\r\n    }\r\n}\r\n","import * as Maybe from './Maybe'\r\nimport * as Utils from './Utils'\r\nimport * as Task from './Task'\r\nimport * as CreateRecord from './CreateRecord'\r\nimport * as Record from './Record'\r\nimport * as AutoCompleteMenu from './AutoCompleteMenu'\r\nimport * as Effect from './Effect'\r\n\r\n// STATE ---\r\n\r\n/** The whole state of the application.\r\n * \r\n*/\r\nexport type State = {\r\n    createRecord: CreateRecord.CreateRecord,\r\n    records: Array<Record.Record>,\r\n    tasks: Array<Task.Task>,\r\n    createRecordError: Maybe.Maybe<CreateRecord.Error>,\r\n    autoCompleteMenu: AutoCompleteMenu.AutoCompleteMenu\r\n}\r\n\r\nconst backendTask = Task.task(\r\n    Task.taskId(0),\r\n    \"Backend\",\r\n    Utils.rgba(0.1, 0.2, 0.3, 1.0),\r\n)\r\n\r\nexport function initialState<Event>(flags: any): [State, Effect.Effect<Event>] {\r\n    try {\r\n        return [\r\n            cast(JSON.parse(flags)).withDefault(initialState_),\r\n            Effect.none(),\r\n        ]\r\n    } catch (e) {\r\n        return [initialState_, Effect.none()]\r\n    }\r\n}\r\n\r\nconst initialState_: State = {\r\n    createRecord: CreateRecord.empty(\"\"),\r\n    records: [\r\n        Record.record(\r\n            \"Login\",\r\n            new Date(),\r\n            new Date(),\r\n            Record.recordId(new Date()),\r\n            backendTask,\r\n        )\r\n    ],\r\n    tasks: [\r\n        backendTask,\r\n        Task.task(\r\n            Task.taskId(1),\r\n            \"Frontend\",\r\n            Utils.rgba(0.8, 0.7, 0.6, 1.0),\r\n        )\r\n    ],\r\n    createRecordError: Maybe.nothing(),\r\n    autoCompleteMenu: AutoCompleteMenu.closed(),\r\n}\r\n\r\nexport function cast(json: any): Maybe.Maybe<State> {\r\n    if (typeof json === \"object\"\r\n        && json.records instanceof Array\r\n        && json.tasks instanceof Array\r\n\r\n    ) {\r\n        return Maybe.map3(\r\n            CreateRecord.cast(json.createRecord),\r\n            Maybe.combine((json.records as Array<any>).map((record: any) => Record.cast(record))),\r\n            Maybe.combine((json.tasks as Array<any>).map((task: any) => Task.cast(task))),\r\n            (createRecord, records, tasks) => ({\r\n                createRecord,\r\n                records,\r\n                tasks,\r\n                createRecordError: Maybe.nothing(),\r\n                autoCompleteMenu: AutoCompleteMenu.closed(),\r\n            })\r\n        )\r\n    } else {\r\n        return Maybe.nothing()\r\n    }\r\n}\r\n","import * as Html from './Html'\r\nimport * as Utils from './Utils'\r\n\r\nexport function diff<T>(\r\n    oldVDom: Html.Html<T>,\r\n    newVDom: Html.Html<T>,\r\n    dispatch: (event: T) => void,\r\n): ($node: Element | Text) => Element | Text {\r\n\r\n    if (oldVDom.nodeType === \"text\"\r\n        || newVDom.nodeType === \"text\"\r\n        || oldVDom.tagName !== newVDom.tagName\r\n    ) {\r\n        return $node => {\r\n            const $newNode = Html.toElement(newVDom, dispatch)\r\n            $node.replaceWith($newNode)\r\n            return $newNode\r\n        }\r\n    } else {\r\n        const patchAttributes = diffAttributes(oldVDom.attributes, newVDom.attributes, dispatch)\r\n        const patchChildren = diffChildren(oldVDom.children, newVDom.children, dispatch)\r\n\r\n        return $node => {\r\n            patchAttributes($node)\r\n            patchChildren($node)\r\n\r\n            return $node\r\n        }\r\n    }\r\n}\r\n\r\n/** Like List.map2 but without ignoring elements if one list is larger than the other */\r\nfunction map2Extra<A, B>(\r\n    xs: Array<A>,\r\n    ys: Array<A>,\r\n    bothPresent: (x: A, y: A, index: number) => B,\r\n    xPresent: (x: A, index: number) => B,\r\n    yPresent: (y: A, index: number) => B\r\n): Array<B> {\r\n    const array: Array<B> = []\r\n\r\n    for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\r\n        array.push(bothPresent(xs[i], ys[i], i))\r\n    }\r\n\r\n    for (let i = ys.length; i < xs.length; i++) {\r\n        array.push(xPresent(xs[i], i))\r\n    }\r\n\r\n    for (let i = xs.length; i < ys.length; i++) {\r\n        array.push(yPresent(ys[i], i))\r\n    }\r\n\r\n    return array\r\n}\r\n\r\n// diffAttributes\r\n\r\nfunction diffAttributes<T>(\r\n    oldAttributes: Array<Html.Attribute<T>>,\r\n    newAttributes: Array<Html.Attribute<T>>,\r\n    dispatch: (event: T) => void,\r\n): ($node: Element | Text) => void {\r\n\r\n    const patches = map2Extra(\r\n        oldAttributes,\r\n        newAttributes,\r\n        (oldAttr, newAttr, i) => ($node: Element) => {\r\n            if (!attributeEquality(oldAttr, newAttr)) {\r\n                removeAttribute(oldAttr, $node)\r\n                Html.toDomAttribute(newAttr, dispatch, $node)\r\n            }\r\n        },\r\n        (oldAttr, i) => $node => {\r\n            removeAttribute(oldAttr, $node)\r\n        },\r\n        (newAttr, i) => $node => {\r\n            Html.toDomAttribute(newAttr, dispatch, $node)\r\n        }\r\n    )\r\n\r\n    return $node => {\r\n        if ($node instanceof Element)\r\n            patches.forEach(patch => patch($node))\r\n    }\r\n}\r\n\r\nfunction attributeEquality<T>(a: Html.Attribute<T>, b: Html.Attribute<T>): boolean {\r\n    if (a.tag === \"attribute\" && b.tag === \"attribute\") {\r\n        return a.name === b.name && a.value === b.value\r\n    } else if (a.tag === \"property\" && b.tag === \"property\") {\r\n        return a.name === b.name && Utils.deepEquality(a.value, b.value)\r\n    } else if (a.tag === \"eventHandler\" && b.tag === \"eventHandler\") {\r\n        // The function comparison will most likely always return false;\r\n        // a smarter implementation could optimize this case somehow.\r\n        return a.eventName === b.eventName && a.handler === b.handler\r\n    } else if (a.tag === \"style\" && b.tag === \"style\") {\r\n        return a.property === b.property && a.value === b.value\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction removeAttribute<T>(attr: Html.Attribute<T>, $node: Element): void {\r\n    if ($node instanceof Text) {\r\n        // Text nodes don't have attributes AFAIK\r\n        return\r\n    }\r\n\r\n    switch (attr.tag) {\r\n        case \"attribute\":\r\n            $node.removeAttribute(attr.name)\r\n            return\r\n        case \"property\":\r\n            ($node as any)[attr.name] = undefined\r\n            return\r\n        case \"eventHandler\":\r\n            ($node as any)[`on${attr.eventName}`] = undefined\r\n            return\r\n        case \"style\":\r\n            ($node as any).style[attr.property] = \"\"\r\n            return\r\n    }\r\n\r\n    Utils.assertNever(attr)\r\n}\r\n\r\n\r\n// diffChildren\r\n\r\nfunction diffChildren<T>(\r\n    oldChildren: Array<Html.Html<T>>,\r\n    newChildren: Array<Html.Html<T>>,\r\n    dispatch: (event: T) => void,\r\n): ($parent: Element | Text) => void {\r\n    return $parent => {\r\n        if ($parent instanceof Element) {\r\n            /** We need the $parent to calculate the patches because we need to save childNodes[i]\r\n             * before removing elements, which could alter the indexing.\r\n             */\r\n            const patches = getChildrenPatches(oldChildren, newChildren, dispatch, $parent)\r\n            patches.forEach(patch => patch())\r\n        }\r\n    }\r\n}\r\n\r\nfunction getChildrenPatches<T>(\r\n    oldChildren: Array<Html.Html<T>>,\r\n    newChildren: Array<Html.Html<T>>,\r\n    dispatch: (event: T) => void,\r\n    $parent: Element,\r\n): Array<() => void> {\r\n    return map2Extra(\r\n        oldChildren,\r\n        newChildren,\r\n        (oldChild, newChild, i) => {\r\n            const $child = $parent.childNodes[i]\r\n\r\n            return () => {\r\n                if ($child instanceof Element || $child instanceof Text)\r\n                    diff(oldChild, newChild, dispatch)($child)\r\n                else\r\n                    throw { $parent, oldChild, newChild, $child }\r\n            }\r\n        },\r\n        (oldChild, i) => {\r\n            const $child = $parent.childNodes[i]\r\n\r\n            return () => {\r\n                $child.remove()\r\n            }\r\n        },\r\n        (newChild, i) => () => {\r\n            $parent.appendChild(Html.toElement(newChild, dispatch))\r\n        }\r\n    )\r\n}\r\n\r\n","/** About this code\n * \n * I'm using The Elm Architecture, which is essentially the same idea as React/Redux.\n * \n */\n\nimport * as State from './State'\nimport * as Update from './Update'\nimport * as View from './View'\n\nimport * as VirtualDom from './VirtualDom'\nimport * as Html from './Html'\n\nlet $rootElement = document.getElementById('root') as Element | Text\nlet timeout = setTimeout(() => { }, 0)\n\n/** Flags refer to some external state that is passed to app initialization */\nconst flags = localStorage.getItem(\"state\")\n\nif ($rootElement !== null) {\n    let [state, initialEffect] = State.initialState<Update.Event>(flags)\n    let view = View.view(state)\n\n    const dispatch = (event: Update.Event) => {\n        const [newState, effect] = Update.update(state, event)\n\n        // Wait for one frame and apply the changes.\n        // This is necessary because performing the effect could call `dispatch` again inmediately!\n\n        clearTimeout(timeout)\n\n        timeout = setTimeout(() => {\n            const newView = View.view(newState)\n            const patch = VirtualDom.diff(view, newView, dispatch)\n\n            state = newState\n            view = newView\n\n            $rootElement = patch($rootElement);\n        }, 0)\n\n        effect.perform(dispatch)\n    }\n\n    const $initialRender = Html.toElement(view, dispatch)\n    $rootElement.replaceWith($initialRender)\n    $rootElement = $initialRender\n\n    initialEffect.perform(dispatch)\n}\n"]}